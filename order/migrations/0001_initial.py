# Generated by Django 3.2.9 on 2023-02-10 05:51

import ckeditor.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('chat', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=15, null=True)),
                ('discount_percent', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount Percentage (%)')),
                ('is_active', models.BooleanField(default=True)),
                ('max_limit', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='MoreStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage', models.IntegerField(default=2)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chat.groupchatmodel')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('duration', models.IntegerField(blank=True, help_text='Enter how many days the plan is valid.', null=True)),
                ('description', models.TextField(blank=True, help_text='Short summary for whom this plan would be useful.', null=True)),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Discount percentage for the provided cost.', max_digits=5, null=True)),
                ('discount_cost', models.FloatField(blank=True, null=True)),
                ('is_recommended', models.BooleanField(default=False)),
                ('features', ckeditor.fields.RichTextField(blank=True, help_text='Specify features for plan if any in points.', null=True)),
                ('group_create', models.BooleanField(default=True, help_text='Has permission to create new groups.')),
                ('add_people', models.BooleanField(default=True, help_text='Has permission to add people to groups.')),
                ('is_company_plan', models.BooleanField(default=False)),
                ('type_of_coderoom', models.CharField(choices=[('Private Coderoom', 'Private Coderoom'), ('Public Coderoom', 'Public Coderoom')], default='Public Coderoom', max_length=300)),
                ('total_group_create_size', models.IntegerField(default=0, help_text='Total number of groups that can be created under this plan.')),
                ('storage', models.FloatField(default=0)),
                ('ram', models.CharField(default='0.5', help_text='Enter ram size in GB', max_length=300)),
                ('vCPUs', models.CharField(default='0.2 - 0.5 vCPUs', max_length=300)),
                ('group_size', models.IntegerField(default=0, help_text='Number of people that can be added per group.')),
                ('cost', models.FloatField(help_text='Cost of plan without any discounts.')),
                ('admin', models.BooleanField(default=True)),
                ('is_visible', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['cost'],
            },
        ),
        migrations.CreateModel(
            name='PlanWithQty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valid_till', models.DateField(blank=True, null=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='order.plan')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon_discount', models.FloatField(default=0.0)),
                ('valid_till', models.DateField(blank=True, null=True)),
                ('amt_paid', models.FloatField(blank=True, null=True)),
                ('order_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('paid', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('total_group_create_size', models.IntegerField(default=0)),
                ('group_size', models.CharField(blank=True, max_length=200, null=True)),
                ('payu_dict', models.TextField(blank=True, null=True)),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='order.coupon')),
                ('more_storage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='more_storage_coderoom', to='order.morestorage')),
                ('plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dummpy_plan_payment', to='order.plan')),
                ('plans', models.ManyToManyField(blank=True, to='order.PlanWithQty')),
            ],
        ),
        migrations.CreateModel(
            name='ManyPlans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='order.payment')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='order.plan')),
            ],
        ),
        migrations.AddField(
            model_name='coupon',
            name='plan_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='order.plan'),
        ),
    ]
