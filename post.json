[
  {
    "model": "post.scope",
    "pk": 1,
    "fields": {
      "name": "Machine Learning",
      "icon": "fas fa-globe"
    }
  },
  {
    "model": "post.scope",
    "pk": 2,
    "fields": {
      "name": "Deep Learning",
      "icon": "fas fa-globe"
    }
  },
  {
    "model": "post.scope",
    "pk": 3,
    "fields": {
      "name": "Coding",
      "icon": "fas fa-globe"
    }
  },
  {
    "model": "post.scope",
    "pk": 4,
    "fields": {
      "name": "Artificial Intelligence",
      "icon": "fas fa-globe"
    }
  },
  {
    "model": "post.language",
    "pk": 1,
    "fields": {
      "name": "Python",
      "icon": "mdi mdi-language-python"
    }
  },
  {
    "model": "post.language",
    "pk": 2,
    "fields": {
      "name": "R",
      "icon": "mdi mdi-language-r"
    }
  },
  {
    "model": "post.language",
    "pk": 3,
    "fields": {
      "name": "Julia",
      "icon": "mdi mdi-code-not-equal-variant"
    }
  },
  {
    "model": "post.category",
    "pk": 1,
    "fields": {
      "name": "Questions /Errors",
      "icon": "mdi mdi-comment-question-outline"
    }
  },
  {
    "model": "post.category",
    "pk": 2,
    "fields": {
      "name": "Dicussions /Informative",
      "icon": "mdi mdi-information-outline"
    }
  },
  {
    "model": "post.post",
    "pk": 15,
    "fields": {
      "user": 1,
      "category": 1,
      "description": "Having Issue with file handing \r\n#",
      "image1": "post_image/temp_7AkKPyY.jpg",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "",
      "language": 1,
      "scope_of_work": 1,
      "timestamp": "2021-12-29T18:11:37.443Z",
      "code": "\u003cspan class\u003d\"hljs-comment\"\u003e# a file named \"geek\", will be opened with the reading mode.\u003c/span\u003e\r\nfile \u003d \u003cspan class\u003d\"hljs-keyword\"\u003eopen\u003c/span\u003e(\u003cspan class\u003d\"hljs-string\"\u003e\u0027geek.txt\u0027\u003c/span\u003e, \u003cspan class\u003d\"hljs-string\"\u003e\u0027r\u0027\u003c/span\u003e)\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# This will print every line one by one in the file\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class\u003d\"hljs-keyword\"\u003eeach\u003c/span\u003e in file:\r\n    \u003cspan class\u003d\"hljs-keyword\"\u003eprint\u003c/span\u003e (\u003cspan class\u003d\"hljs-keyword\"\u003eeach\u003c/span\u003e)",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 16,
    "fields": {
      "user": 1,
      "category": 2,
      "description": "Use the scatter() method to draw a scatter plot diagram:\n#",
      "image1": "post_image/temp_fBoWH5W.jpg",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 3,
      "scope_of_work": 3,
      "timestamp": "2021-12-29T18:14:13.498Z",
      "code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\n\nx \u003d [\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e8\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e17\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e9\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e11\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e12\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e9\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e6\u003c/span\u003e]\ny \u003d [\u003cspan class\u003d\"hljs-number\"\u003e99\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e86\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e87\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e88\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e111\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e86\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e103\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e87\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e94\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e78\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e77\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e85\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e86\u003c/span\u003e]\n\nplt.scatter(x, y)\nplt.show()",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 18,
    "fields": {
      "user": 6,
      "category": 1,
      "description": "",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 1,
      "timestamp": "2022-01-04T11:52:28.884Z",
      "code": " \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e React, {useEffect, useState} \u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class\u003d\"hljs-string\"\u003e\u0027react\u0027\u003c/span\u003e;\n\u003cspan class\u003d\"hljs-comment\"\u003e// import axios from \"axios\";\u003c/span\u003e\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e axios \u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class\u003d\"hljs-string\"\u003e\"./axios\"\u003c/span\u003e;\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e Table \u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class\u003d\"hljs-string\"\u003e\u0027./Table\u0027\u003c/span\u003e;\n\n\u003cspan class\u003d\"hljs-function\"\u003e\u003cspan class\u003d\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class\u003d\"hljs-title\"\u003eData\u003c/span\u003e(\u003cspan class\u003d\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n\n    \u003cspan class\u003d\"hljs-keyword\"\u003econst\u003c/span\u003e[people,setPeople]\u003d useState([]);\n    \u003cspan class\u003d\"hljs-comment\"\u003e// useEffect(() \u003d\u0026gt;{\u003c/span\u003e\n    \u003cspan class\u003d\"hljs-comment\"\u003e//     async function fetchData() {\u003c/span\u003e\n    \u003cspan class\u003d\"hljs-comment\"\u003e//         const req \u003d await axios.get(\"/All\");\u003c/span\u003e\n\n    \u003cspan class\u003d\"hljs-comment\"\u003e//         setPeople(req.data);\u003c/span\u003e\n    \u003cspan class\u003d\"hljs-comment\"\u003e//     }\u003c/span\u003e\n\n    \u003cspan class\u003d\"hljs-comment\"\u003e//     fetchData();\u003c/span\u003e\n    \u003cspan class\u003d\"hljs-comment\"\u003e// }, []);\u003c/span\u003e",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 19,
    "fields": {
      "user": 1,
      "category": 2,
      "description": "test",
      "image1": "post_image/temp_i1vvxSu.jpg",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 2,
      "timestamp": "2022-01-04T12:46:29.689Z",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 21,
    "fields": {
      "user": 5,
      "category": 1,
      "description": "I have the code\r\n#\r\n\r\n#\r\n\r\nwhat should I",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 3,
      "timestamp": "2022-02-22T07:21:08.646Z",
      "code": "mydict \u003d {\"layer1\" : { 0: 0.765}, \u0027layer2\u0027: {0: 0.9876}}\r\nfor idx in range(5):\r\n   mydict[\u003cspan class\u003d\"hljs-string\"\u003e\u0027layer1\u0027\u003c/span\u003e][\u003cspan class\u003d\"hljs-symbol\"\u003eidx\u003c/span\u003e] \u003d idx + 900\r\n   mydict[\u003cspan class\u003d\"hljs-string\"\u003e\u0027layer2\u0027\u003c/span\u003e][\u003cspan class\u003d\"hljs-symbol\"\u003eidx\u003c/span\u003e] \u003d idx + 800\r\nsorted_x \u003d sorted(mydict.items(), key\u003dlambda kv: kv[1])\r\nit gives the error\r\n\r\nTypeError: \u0027\u003cspan class\u003d\"xml\"\u003e\u003cspan class\u003d\"hljs-tag\"\u003e\u0026lt;\u003cspan class\u003d\"hljs-name\"\u003e\u0027\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003enot\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003esupported\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ebetween\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003einstances\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eof\u003c/span\u003e \u0027\u003cspan class\u003d\"hljs-attr\"\u003edict\u003c/span\u003e\u0027 \u003cspan class\u003d\"hljs-attr\"\u003eand\u003c/span\u003e \u0027\u003cspan class\u003d\"hljs-attr\"\u003edict\u003c/span\u003e\u0027\r\n\r\n\u003cspan class\u003d\"hljs-attr\"\u003ewhen\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eI\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003etype\u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-attr\"\u003esorted_x\u003c/span\u003e \u003d \u003cspan class\u003d\"hljs-string\"\u003esorted(mydict.items(),\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ekey\u003c/span\u003e\u003d\u003cspan class\u003d\"hljs-string\"\u003elambda\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ekv:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ekv\u003c/span\u003e[\u003cspan class\u003d\"hljs-attr\"\u003e2\u003c/span\u003e])\r\n\u003cspan class\u003d\"hljs-attr\"\u003eit\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003egives\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ethe\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eerror\u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-attr\"\u003eIndexError:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003etuple\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eindex\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eout\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eof\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003erange\u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-attr\"\u003eit\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eonley\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eworks\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003efor\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eindex\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e0\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ewhich\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eis\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ea\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003estring\u003c/span\u003e!\r\n\r\n\u003cspan class\u003d\"hljs-attr\"\u003eI\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ewant\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ethe\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003edictionary\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eto\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ebe\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003esorted\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ebased\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eon\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ethe\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003evalue\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eand\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003egive\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003ethe\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003eresults\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003elike\u003c/span\u003e\r\n\r\n[(\u0027\u003cspan class\u003d\"hljs-attr\"\u003elayer2\u003c/span\u003e\u0027, {\u003cspan class\u003d\"hljs-attr\"\u003e0:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e800\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e1:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e801\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e2:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e802\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e3:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e803\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e4:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e804\u003c/span\u003e}), (\u0027\u003cspan class\u003d\"hljs-attr\"\u003elayer2\u003c/span\u003e\u0027, {\u003cspan class\u003d\"hljs-attr\"\u003e0:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e900\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e1:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e901\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e2:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e902\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e3:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e903\u003c/span\u003e, \u003cspan class\u003d\"hljs-attr\"\u003e4:\u003c/span\u003e \u003cspan class\u003d\"hljs-attr\"\u003e904\u003c/span\u003e})]\u003c/span\u003e\u003c/span\u003e",
      "liked_by": []
    }
  },
  {
    "model": "post.post",
    "pk": 22,
    "fields": {
      "user": 6,
      "category": 1,
      "description": "ow to  install rasa on windows  8.1 please help its giving me error \r\n\r\n#\r\n #  rasa init is not getting execu",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 2,
      "timestamp": "2022-02-26T03:06:33.091Z",
      "code": "pip \u003cspan class\u003d\"hljs-keyword\"\u003einstall\u003c/span\u003e rasa \r\nrasa init",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 23,
    "fields": {
      "user": 6,
      "category": 2,
      "description": "Started building chatbots using rasa .\r\nCame across with with a wonderful document given by rasa .It is self explanatory and very easy to understand .\r\n\r\nDo check it out \r\n------ https://rasa.com/docs/rasa/",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 2,
      "timestamp": "2022-02-26T03:32:39.469Z",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 24,
    "fields": {
      "user": 3,
      "category": 2,
      "description": "I\u0027m completely new here. But yaa will find new ways and ideas in coding world...!!!",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 3,
      "timestamp": "2022-02-26T12:17:09.306Z",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 27,
    "fields": {
      "user": 5,
      "category": 2,
      "description": "What Exactly are Stellar AI Code-rooms?\r\n\r\nStellar AI Code-room is an exclusive functionality/product/service created and provided by Stellar AI.\r\nThese are a few features/advantages/use-cases of the code-rooms -\r\n1) Live real time Audio, Video and chat features for users inside the AI code-room / meeting, while coding live and real time.\r\n2) Live real time Collaborative Coding Interface where all the different Machine Learning / Deep Learning / AI Libraries are provided in the Coding Interface.\r\n3) Python coders/students/developers/employees/companies anyone can come here add send and accept friend requests of other users and add them in a code-room and use this unique code-room for growth.\r\n4) Every Code-room has an admin who has the power to add/remove ‘n’ number of users.\r\n5) In the absence of the admin still all the code-room members can code and run algorithms.\r\n6) National-International users can connect very easily just by sending/accepting a friend request and start doing projects together.\r\n7) Students when own a code-room, can add and remove whoever they want(teachers/mentors/friends) and learn and grow at Data Science according to their pace.\r\n8) Students/Enthusiasts who have absolutely no knowledge about Python/Machine Learning/Neural Networks can become an admin in these code-rooms and add mentors to learn real time Data Science.\r\n9) Enjoy this mix of social media and Data Science journey and grow together.",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 4,
      "timestamp": "2022-03-09T10:21:08.088Z",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 28,
    "fields": {
      "user": 46,
      "category": 2,
      "description": "  ",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 2,
      "scope_of_work": 1,
      "timestamp": "2022-04-20T06:40:54.820Z",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 30,
    "fields": {
      "user": 5,
      "category": 1,
      "description": "Does someone know how to do Decision Trees?",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 1,
      "timestamp": "2022-06-30T08:41:52.881Z",
      "liked_by": []
    }
  },
  {
    "model": "post.post",
    "pk": 31,
    "fields": {
      "user": 6,
      "category": 1,
      "description": "how to work on random forest ?",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 1,
      "timestamp": "2022-07-01T07:35:11.655Z",
      "liked_by": [

      ]
    }
  },
  {
    "model": "post.post",
    "pk": 32,
    "fields": {
      "user": 89,
      "category": 2,
      "description": "I am looking for job as data sciencetist position ",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "language": 1,
      "scope_of_work": 1,
      "timestamp": "2022-09-28T17:11:23.568Z",
      "liked_by": []
    }
  },
  {
    "model": "post.firstlevelcategory",
    "pk": 1,
    "fields": {
      "name": "Machine learning"
    }
  },
  {
    "model": "post.firstlevelcategory",
    "pk": 2,
    "fields": {
      "name": "NLP (Natural Language Processing)"
    }
  },
  {
    "model": "post.firstlevelcategory",
    "pk": 3,
    "fields": {
      "name": "Forecasting"
    }
  },
  {
    "model": "post.firstlevelcategory",
    "pk": 4,
    "fields": {
      "name": "Deep Learning"
    }
  },
  {
    "model": "post.secondlevelcategory",
    "pk": 1,
    "fields": {
      "name": "Unsupervised",
      "first_category": 1
    }
  },
  {
    "model": "post.secondlevelcategory",
    "pk": 2,
    "fields": {
      "name": "Supervised",
      "first_category": 1
    }
  },
  {
    "model": "post.secondlevelcategory",
    "pk": 3,
    "fields": {
      "name": "Basic NLP",
      "first_category": 2
    }
  },
  {
    "model": "post.secondlevelcategory",
    "pk": 4,
    "fields": {
      "name": "Named Entity Recognition",
      "first_category": 2
    }
  },
  {
    "model": "post.secondlevelcategory",
    "pk": 5,
    "fields": {
      "name": "Sentiment Analysis",
      "first_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 1,
    "fields": {
      "name": "Clustering",
      "first_category": 1,
      "second_category": 1
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 2,
    "fields": {
      "name": "Association Rules",
      "first_category": 1,
      "second_category": 1
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 3,
    "fields": {
      "name": "Recommendation",
      "first_category": 1,
      "second_category": 1
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 4,
    "fields": {
      "name": "PCA",
      "first_category": 1,
      "second_category": 1
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 5,
    "fields": {
      "name": "Regression",
      "first_category": 1,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 6,
    "fields": {
      "name": "Decision Tree",
      "first_category": 1,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 7,
    "fields": {
      "name": "RNN",
      "first_category": 4,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 8,
    "fields": {
      "name": "CNN",
      "first_category": 4,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 9,
    "fields": {
      "name": "ANN",
      "first_category": 4,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 10,
    "fields": {
      "name": "KNN",
      "first_category": 1,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 11,
    "fields": {
      "name": "SVM",
      "first_category": 1,
      "second_category": 2
    }
  },
  {
    "model": "post.thirdlevelcategory",
    "pk": 12,
    "fields": {
      "name": "TSNE",
      "first_category": 1,
      "second_category": 1
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 1,
    "fields": {
      "name": "Hierarchical",
      "first_category": 1,
      "second_category": 1,
      "third_category": 1
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 2,
    "fields": {
      "name": "K-means",
      "first_category": 1,
      "second_category": 1,
      "third_category": 1
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 3,
    "fields": {
      "name": "DBSCAN",
      "first_category": 1,
      "second_category": 1,
      "third_category": 1
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 4,
    "fields": {
      "name": "Linear Regression",
      "first_category": 1,
      "second_category": 2,
      "third_category": 5
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 5,
    "fields": {
      "name": "Multi linear Regression",
      "first_category": 1,
      "second_category": 2,
      "third_category": 5
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 6,
    "fields": {
      "name": "Logistic Regression",
      "first_category": 1,
      "second_category": 2,
      "third_category": 5
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 7,
    "fields": {
      "name": "Bagging",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 8,
    "fields": {
      "name": "Boosting",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 9,
    "fields": {
      "name": "Stacking",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 10,
    "fields": {
      "name": "Random Forest",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 11,
    "fields": {
      "name": "LGBM",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 12,
    "fields": {
      "name": "XGBM",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 13,
    "fields": {
      "name": "Catboost",
      "first_category": 1,
      "second_category": 2,
      "third_category": 6
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 19,
    "fields": {
      "name": "LSTM",
      "first_category": 4,
      "second_category": 2,
      "third_category": 7
    }
  },
  {
    "model": "post.fourthlevelcategory",
    "pk": 20,
    "fields": {
      "name": "BI-Directional LSTM",
      "first_category": 4,
      "second_category": 2,
      "third_category": 7
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 5,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 5,
      "fourth_level_category": 5,
      "description": "Multi linear Regression Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"coffeescript\"\u003e\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd \r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np \r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e statsmodels.graphics.regressionplots \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e influence_plots \r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e statsmodels.formula.api \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e smf \r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e os \r\nos.getcwd()\r\n\r\ndata\u003dpd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"Multilinear reg.csv\"\u003c/span\u003e)\r\n\r\ndata.head()\r\n\r\ndata.info()\r\n\r\ndata.isna().sum()\r\n\r\ndata.corr()           \u003cspan class\u003d\"hljs-comment\"\u003e#to find correlation\u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e seaborn \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e sns \u003cspan class\u003d\"hljs-comment\"\u003e#get scatter plot \u003c/span\u003e\r\n\r\nsns.set_style(\u003cspan class\u003d\"hljs-string\"\u003e\u0027darkgrid\u0027\u003c/span\u003e)\r\nsns.pairplot(data)\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e statsmodels.formula.api \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e smf\r\n\r\nmodel \u003d smf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Y~X1+X2+X3+X4\u0027\u003c/span\u003e,data\u003ddata).fit()\r\n\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(model.tvalues,\u003cspan class\u003d\"hljs-string\"\u003e\u0027\\n\u0027\u003c/span\u003e,model.pvalues)\r\n\r\nmodel.params\r\n\r\n(model.rsquared,model.rsquared_adj)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#CALCULATE VIF\u003c/span\u003e\r\n\r\nrsp_X1\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\u0027X1~X2+X3+X4\u0027\u003c/span\u003e,data\u003ddata).fit().rsquared\r\nvif_X1 \u003d \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e/(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e-rsp_X1)\r\n\r\n\r\nrsp_X2\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\u0027X2~X1+X3+X4\u0027\u003c/span\u003e,data\u003ddata).fit().rsquared\r\nvif_X2 \u003d \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e/(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e-rsp_X2)\r\n\r\n\r\nrsp_X3\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\u0027X3~X1+X2+X4\u0027\u003c/span\u003e,data\u003ddata).fit().rsquared\r\nvif_X3 \u003d \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e/(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e-rsp_X3)\r\n\r\n\r\nrsp_X4\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\u0027X4~X1+X2+X3\u0027\u003c/span\u003e,data\u003ddata).fit().rsquared\r\nvif_X4 \u003d \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e/(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e-rsp_X4)\r\n\r\nd1\u003d{\u003cspan class\u003d\"hljs-string\"\u003e\u0027Variables\u0027\u003c/span\u003e:[\u003cspan class\u003d\"hljs-string\"\u003e\u0027X1\u0027\u003c/span\u003e,\u003cspan class\u003d\"hljs-string\"\u003e\u0027X2\u0027\u003c/span\u003e,\u003cspan class\u003d\"hljs-string\"\u003e\u0027X3\u0027\u003c/span\u003e,\u003cspan class\u003d\"hljs-string\"\u003e\u0027X4\u0027\u003c/span\u003e],\u003cspan class\u003d\"hljs-string\"\u003e\u0027VIF\u0027\u003c/span\u003e:[vif_X1,vif_X2,vif_X3,vif_X4]}\r\n\r\nVif_frame\u003dpd.DataFrame(d1)\r\nVif_frame\r\n\r\n\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#high influence plot \u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e statsmodels.graphics.regressionplots \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e influence_plot\r\ninfluence_plot(model)\r\nplt.show()\r\n\r\nk \u003d data.shape[\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e]\r\nn \u003d data.shape[\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e]\r\nleverage_cutoff \u003d \u003cspan class\u003d\"hljs-number\"\u003e3\u003c/span\u003e*((k + \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e)/n)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#data point 48,49 are influencers\u003c/span\u003e\r\n\r\ndata[data.index.isin([\u003cspan class\u003d\"hljs-number\"\u003e48\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e49\u003c/span\u003e])]\r\n\r\ndata1\u003ddata\r\ndata\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#improve the model\u003c/span\u003e\r\n\r\ndata_new\u003ddata1\r\ndata_new.head()\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Discard the data points which are influencers and reasign the row number (reset_index())\u003c/span\u003e\r\ndata2\u003ddata_new.drop(data_new.index[[\u003cspan class\u003d\"hljs-number\"\u003e48\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e49\u003c/span\u003e]],axis\u003d\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e).reset_index()\r\n\r\ndata2\r\n\r\nfinal_ms\u003d smf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Y~X1+X2+X3\u0027\u003c/span\u003e,data \u003ddata2).fit()\r\nfinal_ms\r\n\r\n(final_ms.rsquared,final_ms.aic)\r\n\r\n(final_st.rsquared,final_st.aic)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#cooks distance \u003c/span\u003e\r\n\r\nmodel_influence_V \u003d final_ms.get_influence()\r\n(c_V, _) \u003d model_influence_V.cooks_distance\r\n\r\nfig\u003d plt.subplots(figsize\u003d(\u003cspan class\u003d\"hljs-number\"\u003e20\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e))\r\nplt.stem(np.arange(len(data2)),np.round(c_V,\u003cspan class\u003d\"hljs-number\"\u003e3\u003c/span\u003e));\r\nplt.xlabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Row index\u0027\u003c/span\u003e)\r\nplt.ylabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Cooks Distance\u0027\u003c/span\u003e);\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#index of the data points where c is more than .5\u003c/span\u003e\r\n(np.argmax(c_V),np.max(c_V))\r\n\r\n(final_ms.rsquared,final_ms.aic)\r\n\r\nfinal_ms.predict(data)\r\n\r\n\r\n\r\nfinal_ms.predict(data1.iloc[\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e,])\r\n\r\npred_y \u003d final_ms.predict(data1)\r\npred_y\r\n\r\n\u003c/span\u003e",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-18T05:38:36.931Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 6,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 5,
      "fourth_level_category": 6,
      "description": "Logistic Regression Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.linear_model \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e LogisticRegression\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd \r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\r\ndata\u003dpd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"Logistic_reg.csv\"\u003c/span\u003e)\r\n\r\ndata.head()\r\n\r\ndata.shape\r\n\r\nX \u003d data.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e:]\r\nY \u003d data.iloc[\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:,\u003cspan class\u003d\"hljs-number\"\u003e-5\u003c/span\u003e]\r\n\r\nX\r\n\r\nY\r\n\r\nclassifier\u003dLogisticRegression()\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.linear_model \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e LogisticRegression\r\n\r\nclassifier\u003dLogisticRegression()\r\nclassifier.fit(X,Y)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Predict for X dataset\u003c/span\u003e\r\ny_pred \u003d classifier.predict(X)\r\n\r\ny_pred_df\u003d pd.DataFrame({\u003cspan class\u003d\"hljs-string\"\u003e\u0027actual\u0027\u003c/span\u003e: Y,\r\n                         \u003cspan class\u003d\"hljs-string\"\u003e\u0027predicted_prob\u0027\u003c/span\u003e: classifier.predict(X)})\r\ny_pred_df\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Confusion Matrix for the model accuracy\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e confusion_matrix\r\nconfusion_matrix \u003d confusion_matrix(Y,y_pred)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e (confusion_matrix)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Classification report\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e classification_report\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(classification_report(Y,y_pred))\r\n\r\n\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e roc_curve\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e roc_auc_score\r\n\r\nfpr, tpr, thresholds \u003d roc_curve(Y, classifier.predict_proba (X)[:,\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e])\r\n\r\nauc \u003d roc_auc_score(Y, y_pred)\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\nplt.plot(fpr, tpr, color\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027red\u0027\u003c/span\u003e, label\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027logit model ( area  \u003d %0.2f)\u0027\u003c/span\u003e%auc)\r\nplt.plot([\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e], [\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e], \u003cspan class\u003d\"hljs-string\"\u003e\u0027k--\u0027\u003c/span\u003e)\r\nplt.xlabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027False Positive Rate or [1 - True Negative Rate]\u0027\u003c/span\u003e)\r\nplt.ylabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027True Positive Rate\u0027\u003c/span\u003e)",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-18T07:11:57.487Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 7,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 7,
      "description": "Bagging Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e# Bagged Decision Trees for Classification\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e read_csv\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KFold\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cross_val_score\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.ensemble \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e BaggingClassifier\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.tree \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e DecisionTreeClassifier\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"Bagging_data.csv\"\u003c/span\u003e)\r\narray \u003d data.values\r\nX \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nseed \u003d \u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e\r\n\r\nkfold \u003d KFold(n_splits\u003d\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e, random_state\u003dseed)\r\ncart \u003d DecisionTreeClassifier()\r\nnum_trees \u003d \u003cspan class\u003d\"hljs-number\"\u003e200\u003c/span\u003e\r\nmodel \u003d BaggingClassifier(base_estimator\u003dcart, n_estimators\u003dnum_trees, random_state\u003dseed)\r\nresults \u003d cross_val_score(model, X, Y, cv\u003dkfold)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(results.mean())",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T05:46:31.897Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 8,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 8,
      "description": "Boosting Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e# AdaBoost Classification\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e read_csv\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KFold\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cross_val_score\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.ensemble \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e AdaBoostClassifier\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"Boosting.csv\"\u003c/span\u003e)\r\narray \u003d data.values\r\n\r\nX \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\nnum_trees \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\nseed\u003d\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e\r\nkfold \u003d KFold(n_splits\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e, random_state\u003dseed)\r\nmodel \u003d AdaBoostClassifier(n_estimators\u003dnum_trees, random_state\u003dseed)\r\nresults \u003d cross_val_score(model, X, Y, cv\u003dkfold)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(results.mean())",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T10:10:43.265Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 9,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 9,
      "description": "Stacking Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e# Stacking Ensemble for Classification\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e read_csv\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KFold\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cross_val_score\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.linear_model \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e LogisticRegression\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.tree \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e DecisionTreeClassifier\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.svm \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e SVC\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.ensemble \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e VotingClassifier\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"Stacking.csv\"\u003c/span\u003e)\r\narray \u003d data.values\r\nX \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nkfold \u003d KFold(n_splits\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e, random_state\u003d\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# create the sub models\u003c/span\u003e\r\nestimators \u003d []\r\nmodel1 \u003d LogisticRegression(max_iter\u003d\u003cspan class\u003d\"hljs-number\"\u003e500\u003c/span\u003e)\r\nestimators.append((\u003cspan class\u003d\"hljs-string\"\u003e\u0027logistic\u0027\u003c/span\u003e, model1))\r\nmodel2 \u003d DecisionTreeClassifier()\r\nestimators.append((\u003cspan class\u003d\"hljs-string\"\u003e\u0027cart\u0027\u003c/span\u003e, model2))\r\nmodel3 \u003d SVC()\r\nestimators.append((\u003cspan class\u003d\"hljs-string\"\u003e\u0027svm\u0027\u003c/span\u003e, model3))\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# create the ensemble model\u003c/span\u003e\r\nensemble \u003d VotingClassifier(estimators)\r\nresults \u003d cross_val_score(ensemble, X, Y, cv\u003dkfold)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(results.mean())",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T10:15:02.001Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 10,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 10,
      "description": "Random Forest Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e# Random Forest Classification\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e read_csv\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KFold\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cross_val_score\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.ensemble \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e RandomForestClassifier\r\ndata\u003dpd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"Random_forest.csv\"\u003c/span\u003e)\r\narray\u003ddata.values\r\nX \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nnum_trees \u003d \u003cspan class\u003d\"hljs-number\"\u003e100\u003c/span\u003e\r\nmax_features \u003d \u003cspan class\u003d\"hljs-number\"\u003e3\u003c/span\u003e\r\nkfold \u003d KFold(n_splits\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e, random_state\u003d\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e)\r\nmodel \u003d RandomForestClassifier(n_estimators\u003dnum_trees, max_features\u003dmax_features)\r\nresults \u003d cross_val_score(model, X, Y, cv\u003dkfold)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(results.mean())",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T10:17:22.198Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 11,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 12,
      "description": "XGBM Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e# First XGBoost model for Pima Indians dataset\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd \r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e xgboost \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e XGBClassifier\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e train_test_split\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e accuracy_score\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# load data\u003c/span\u003e\r\ndataset \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"XGBM.csv\"\u003c/span\u003e)\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# split data into X and y\u003c/span\u003e\r\nX \u003d dataset[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d dataset[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# split data into train and test sets\u003c/span\u003e\r\nseed \u003d \u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e\r\ntest_size \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.33\u003c/span\u003e\r\nX_train, X_test, y_train, y_test \u003d train_test_split(X, Y, test_size\u003dtest_size, random_state\u003dseed)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# fit model no training data\u003c/span\u003e\r\nmodel \u003d XGBClassifier()\r\nmodel.fit(X_train, y_train)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# make predictions for test data\u003c/span\u003e\r\ny_pred \u003d model.predict(X_test)\r\npredictions \u003d [round(value) \u003cspan class\u003d\"hljs-keyword\"\u003efor\u003c/span\u003e value \u003cspan class\u003d\"hljs-keyword\"\u003ein\u003c/span\u003e y_pred]\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# evaluate predictions\u003c/span\u003e\r\naccuracy \u003d accuracy_score(y_test, predictions)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(\u003cspan class\u003d\"hljs-string\"\u003e\"Accuracy: %.2f%%\"\u003c/span\u003e % (accuracy * \u003cspan class\u003d\"hljs-number\"\u003e100.0\u003c/span\u003e))",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T10:58:19.006Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 12,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 11,
      "description": "LGBM Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Importing the dataset\u003c/span\u003e\r\ndataset \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\u0027LGBM.csv\u0027\u003c/span\u003e)\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# split data into X and y\u003c/span\u003e\r\nX \u003d dataset.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d dataset.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Splitting the dataset into the Training set and Test set\u003c/span\u003e\r\n\r\nx_train, x_test, y_train, y_test \u003d train_test_split(X, Y, test_size \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.2\u003c/span\u003e, random_state \u003d \u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e lightgbm \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e lgb\r\nd_train \u003d lgb.Dataset(x_train, label\u003dy_train)\r\n\r\nparams \u003d {}\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027learning_rate\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.002\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027boosting_type\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027gbdt\u0027\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027objective\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027binary\u0027\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027metric\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027binary_logloss\u0027\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027sub_feature\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.5\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027num_leaves\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027min_data\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027max_depth\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\n\r\nclf \u003d lgb.train(params, d_train, \u003cspan class\u003d\"hljs-number\"\u003e100\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Prediction\u003c/span\u003e\r\ny_pred\u003dclf.predict(x_test)\r\n\r\npredictions \u003d [round(value) \u003cspan class\u003d\"hljs-keyword\"\u003efor\u003c/span\u003e value \u003cspan class\u003d\"hljs-keyword\"\u003ein\u003c/span\u003e y_pred]\r\n\r\naccuracy \u003d accuracy_score(y_test, predictions)\r\n\r\n\r\naccuracy",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T11:00:47.262Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 13,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 6,
      "fourth_level_category": 11,
      "description": "LGBM Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Importing the dataset\u003c/span\u003e\r\ndataset \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\u0027LGBM.csv\u0027\u003c/span\u003e)\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# split data into X and y\u003c/span\u003e\r\nX \u003d dataset.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d dataset.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Splitting the dataset into the Training set and Test set\u003c/span\u003e\r\n\r\nx_train, x_test, y_train, y_test \u003d train_test_split(X, Y, test_size \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.2\u003c/span\u003e, random_state \u003d \u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e lightgbm \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e lgb\r\nd_train \u003d lgb.Dataset(x_train, label\u003dy_train)\r\n\r\nparams \u003d {}\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027learning_rate\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.002\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027boosting_type\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027gbdt\u0027\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027objective\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027binary\u0027\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027metric\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027binary_logloss\u0027\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027sub_feature\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e0.5\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027num_leaves\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027min_data\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\nparams[\u003cspan class\u003d\"hljs-string\"\u003e\u0027max_depth\u0027\u003c/span\u003e] \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\n\r\nclf \u003d lgb.train(params, d_train, \u003cspan class\u003d\"hljs-number\"\u003e100\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Prediction\u003c/span\u003e\r\ny_pred\u003dclf.predict(x_test)\r\n\r\npredictions \u003d [round(value) \u003cspan class\u003d\"hljs-keyword\"\u003efor\u003c/span\u003e value \u003cspan class\u003d\"hljs-keyword\"\u003ein\u003c/span\u003e y_pred]\r\n\r\naccuracy \u003d accuracy_score(y_test, predictions)\r\n\r\n\r\naccuracy",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T11:03:31.955Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 14,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 10,
      "description": "KNN Skeleton Algorithm",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd \r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np \r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KFold\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cross_val_score\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.neighbors \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KNeighborsClassifier \r\n\r\ndata\u003dpd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"KNN.csv\"\u003c/span\u003e)\r\n\r\narray\u003ddata.values\r\n\r\nX\u003darray[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\nY\u003darray[:,\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\nnum_folds\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e\r\n\r\nkfold\u003dKFold(n_splits\u003d\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e)\r\n\r\nmodel\u003dKNeighborsClassifier(n_neighbors\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e)\r\n\r\n\r\nresult\u003dcross_val_score(model,X,Y,cv\u003dkfold)\r\n\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(result.mean())\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Grid Search CV \u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.neighbors \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KNeighborsClassifier\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e GridSearchCV\r\n\r\narray\u003ddata.values\r\n\r\nX \u003d array[:, \u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nY \u003d array[:, \u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\nn_neighbors \u003d numpy.array(range(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e30\u003c/span\u003e))\r\nparam_grid \u003d dict(n_neighbors\u003dn_neighbors)\r\n\r\nmodel \u003d KNeighborsClassifier()\r\ngrid \u003d GridSearchCV(estimator\u003dmodel, param_grid\u003dparam_grid)\r\ngrid.fit(X, Y)\r\n\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(grid.best_score_)\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(grid.best_params_)\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt \r\n%matplotlib inline\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# choose k between 1 to 31\u003c/span\u003e\r\nk_range \u003d range(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e41\u003c/span\u003e)\r\nk_scores \u003d []\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efor\u003c/span\u003e k \u003cspan class\u003d\"hljs-keyword\"\u003ein\u003c/span\u003e k_range:\r\n    knn \u003d KNeighborsClassifier(n_neighbors\u003dk)\r\n    scores \u003d cross_val_score(knn, X, Y, cv\u003d\u003cspan class\u003d\"hljs-number\"\u003e7\u003c/span\u003e)\r\n    k_scores.append(scores.mean())\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# plot \u003c/span\u003e\r\nplt.plot(k_range, k_scores)\r\nplt.xlabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Value of K for KNN\u0027\u003c/span\u003e)\r\nplt.ylabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Cross-Validated Accuracy\u0027\u003c/span\u003e)\r\nplt.show()",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T11:50:04.563Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 15,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 11,
      "description": "SVM Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.feature_extraction.text \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e CountVectorizer, TfidfVectorizer\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.preprocessing \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e StandardScaler\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e svm\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.svm \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e SVC\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e GridSearchCV\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e classification_report\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e accuracy_score, confusion_matrix\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e train_test_split, cross_val_score\r\n\r\n\r\ndata\u003dpd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"SVM.csv\"\u003c/span\u003e)\r\n\r\n\r\narray\u003ddata.values\r\n\r\nX_train\u003darray[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\nY_train\u003ddata.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e6\u003c/span\u003e]\r\nY_train\r\n\r\narray1\u003ddata_test.values\r\narray1\r\n\r\nX_test\u003darray1[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\nX_test\r\n\r\nY_test\u003ddata_test.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e6\u003c/span\u003e]\r\nY_test\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#grid seacrch cv\u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e svm\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.svm \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e SVC\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e GridSearchCV\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e classification_report\r\n\r\n\r\n\r\nclf\u003dSVC()\r\nparam_grid \u003d [{\u003cspan class\u003d\"hljs-string\"\u003e\u0027kernel\u0027\u003c/span\u003e:[\u003cspan class\u003d\"hljs-string\"\u003e\u0027rbf\u0027\u003c/span\u003e],\u003cspan class\u003d\"hljs-string\"\u003e\u0027gamma\u0027\u003c/span\u003e:[\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e0.5\u003c/span\u003e],\u003cspan class\u003d\"hljs-string\"\u003e\u0027C\u0027\u003c/span\u003e:[\u003cspan class\u003d\"hljs-number\"\u003e12\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e11\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e0.1\u003c/span\u003e,\u003cspan class\u003d\"hljs-number\"\u003e0.001\u003c/span\u003e] }]\r\ngsv \u003d GridSearchCV(clf,param_grid,cv\u003d\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e)\r\ngsv.fit(X_train,Y_train)\r\n\r\n\r\n\r\ngsv.best_params_,gsv.best_score_\r\n\r\nclf \u003d SVC(C\u003d \u003cspan class\u003d\"hljs-number\"\u003e12\u003c/span\u003e, gamma \u003d \u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e)\r\nclf.fit(X_train , Y_train)\r\nY_pred \u003d clf.predict(X_test)\r\nacc \u003d accuracy_score(Y_test, Y_pred) * \u003cspan class\u003d\"hljs-number\"\u003e100\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(\u003cspan class\u003d\"hljs-string\"\u003e\"Accuracy \u003d\"\u003c/span\u003e, acc)\r\nconfusion_matrix(Y_test, Y_pred)",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-19T12:04:52.780Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 16,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 1,
      "third_level_category": 1,
      "fourth_level_category": 1,
      "description": "Hierachical Skeleton code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e#  hierarchical clustering \u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e scipy.cluster.hierarchy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e sch\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.cluster \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e AgglomerativeClustering\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e matplotlib \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e seaborn \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e sn\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Normalization function \u003c/span\u003e\r\ndef norm_func(i):\r\n    x \u003d (i-i.min())/(i.max()-i.min())\r\n    \u003cspan class\u003d\"hljs-keyword\"\u003ereturn\u003c/span\u003e (x)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Normalized data frame (considering the numerical part of data)\u003c/span\u003e\r\ndata_norm \u003d norm_func(data.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e:])\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# create dendrogram\u003c/span\u003e\r\ndendrogram \u003d sch.dendrogram(sch.linkage(df_norm, method\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027single\u0027\u003c/span\u003e))\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# create clusters\u003c/span\u003e\r\nhc \u003d AgglomerativeClustering(n_clusters\u003d\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e, affinity \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027euclidean\u0027\u003c/span\u003e, linkage \u003d \u003cspan class\u003d\"hljs-string\"\u003e\u0027single\u0027\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# save clusters for chart\u003c/span\u003e\r\ny_hc \u003d hc.fit_predict(data_norm)\r\nClusters\u003dpd.DataFrame(y_hc,columns\u003d[\u003cspan class\u003d\"hljs-string\"\u003e\u0027Clusters\u0027\u003c/span\u003e])\r\n\r\ndf_norm[\u003cspan class\u003d\"hljs-string\"\u003e\u0027h_clusterid\u0027\u003c/span\u003e] \u003d h_clusters.labels_",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-19T12:27:58.532Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 17,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 1,
      "third_level_category": 1,
      "fourth_level_category": 2,
      "description": "K- Means Clustering Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e matplotlib \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.cluster \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KMeans\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Normalization function \u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.preprocessing \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e StandardScaler\r\nscaler \u003d StandardScaler()\r\nscaled_data\u003d scaler.fit_transform(data.iloc[:,\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e:])\r\n\r\n\r\n\r\nk-nn \u003d []\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efor\u003c/span\u003e i \u003cspan class\u003d\"hljs-keyword\"\u003ein\u003c/span\u003e range(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e11\u003c/span\u003e):\r\n    kmeans \u003d KMeans(n_clusters\u003di,random_state\u003d\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e)\r\n    kmeans.fit(scaled_data_df)\r\n    wcss.append(kmeans.inertia_)\r\n    \r\nplt.plot(range(\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e11\u003c/span\u003e), k-nn)\r\nplt.title(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Elbow Method\u0027\u003c/span\u003e)\r\nplt.xlabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027Number of clusters\u0027\u003c/span\u003e)\r\nplt.ylabel(\u003cspan class\u003d\"hljs-string\"\u003e\u0027k-nn\u0027\u003c/span\u003e)\r\nplt.show()\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Build Cluster algorithm\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.cluster \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e KMeans\r\nclusters_new \u003d KMeans(\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e, random_state\u003d\u003cspan class\u003d\"hljs-number\"\u003e40\u003c/span\u003e)\r\nclusters_new.fit(scaled_data)\r\n\r\nclusters_new.labels_\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Assign clusters to the data set\u003c/span\u003e\r\ndata[\u003cspan class\u003d\"hljs-string\"\u003e\u0027clusterid_new\u0027\u003c/span\u003e] \u003d clusters_new.labels_",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-19T12:39:41.280Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 18,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 1,
      "fourth_level_category": 3,
      "description": "DBSCAN Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-comment\"\u003e#Import the libraries\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.cluster \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e DBSCAN\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.preprocessing \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e StandardScaler\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\ndf \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e);\r\n\r\narray\u003ddf.values\r\n\r\nstdcaler \u003d StandardScaler().fit(array)\r\nX \u003d stscaler.transform(array)\r\ndbscan \u003d DBSCAN(eps\u003d\u003cspan class\u003d\"hljs-number\"\u003e0.8\u003c/span\u003e, min_samples\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e)\r\ndbscan.fit(X)",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-19T12:44:40.172Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 19,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 1,
      "third_level_category": 12,
      "description": "TSNE Clustering Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.manifold \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e TSNE\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e bioinfokit.visuz \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cluster\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e)\r\n\r\narray \u003d data.values\r\n\r\nX \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e:]\r\nY \u003d array[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e]\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e bioinfokit.visuz \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cluster\r\n\r\ndata_tsne \u003d TSNE(n_components\u003d\u003cspan class\u003d\"hljs-number\"\u003e2\u003c/span\u003e).fit_transform(X)\r\ncluster.tsneplot(score\u003ddata_tsne)\r\n\r\ncolor_class \u003d data[\u003cspan class\u003d\"hljs-string\"\u003e\u0027column\u0027\u003c/span\u003e].to_numpy()\r\ncluster.tsneplot(score\u003ddata_tsne, colorlist\u003dcolor_class, legendpos\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027upper right\u0027\u003c/span\u003e,legendanchor\u003d(\u003cspan class\u003d\"hljs-number\"\u003e1.12\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e))",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-19T13:01:16.903Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 20,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 1,
      "third_level_category": 4,
      "description": "PCA Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd \r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.decomposition \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e PCA\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e plt\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.preprocessing \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e scale \r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Normalizing the numerical data \u003c/span\u003e\r\ndata_normal \u003d scale(data)\r\n\r\ndata_normal\r\n\r\npca \u003d PCA()\r\npca_values \u003d pca.fit_transform(data_normal)\r\n\r\npca_values\r\n\r\npca \u003d PCA(n_components \u003d \u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e)\r\npca_values \u003d pca.fit_transform(data_normal)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# The amount of variance that each PCA explains is \u003c/span\u003e\r\nvar \u003d pca.explained_variance_ratio_\r\nvar\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Cumulative variance \u003c/span\u003e\r\nvar1 \u003d np.cumsum(np.round(var,decimals \u003d \u003cspan class\u003d\"hljs-number\"\u003e4\u003c/span\u003e)*\u003cspan class\u003d\"hljs-number\"\u003e100\u003c/span\u003e)\r\nvar1\r\n\r\npca.components_\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Variance plot for PCA components obtained \u003c/span\u003e\r\nplt.plot(var1,color\u003d\u003cspan class\u003d\"hljs-string\"\u003e\"red\"\u003c/span\u003e)\r\n\r\n pca_values[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e]\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# plot between PCA1 and PCA2 \u003c/span\u003e\r\nx \u003d pca_values[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e]\r\ny \u003d pca_values[:,\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e2\u003c/span\u003e]\r\n\r\nplt.scatter(x,y)\r\n\r\nfinal_data \u003d pd.concat([pd.DataFrame(pca_values[:,\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e2\u003c/span\u003e],columns\u003d[\u003cspan class\u003d\"hljs-string\"\u003e\u0027pc1\u0027\u003c/span\u003e,\u003cspan class\u003d\"hljs-string\"\u003e\u0027pc2\u0027\u003c/span\u003e]), data[[\u003cspan class\u003d\"hljs-string\"\u003e\u0027data\u0027\u003c/span\u003e]]], axis \u003d \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e)",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-19T13:16:13.612Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 21,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 1,
      "third_level_category": 2,
      "description": "Association Rule Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e mlxtend.frequent_patterns \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e apriori,association_rules\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e mlxtend.preprocessing \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e TransactionEncoder\r\n\r\n\r\ndata\u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e)\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e# Apriori Algorithm \u003c/span\u003e\r\n\r\nfrequent_itemsets \u003d apriori(data, min_support\u003d\u003cspan class\u003d\"hljs-number\"\u003e0.1\u003c/span\u003e, use_colnames\u003dTrue)\r\nfrequent_itemsets\r\n\r\nrules \u003d association_rules(frequent_itemsets, metric\u003d\u003cspan class\u003d\"hljs-string\"\u003e\"lift\"\u003c/span\u003e, min_threshold\u003d\u003cspan class\u003d\"hljs-number\"\u003e0.5\u003c/span\u003e)\r\nrules\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#####  A leverage value of 0 indicates independence. \r\n\r\nrules.sort_values(\u0027lift\u0027,ascending \u003d False)[0:20]\r\n\r\nrules[rules.lift\u0026gt;1]\r\n\r\n\u003c/span\u003e",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-20T04:40:34.054Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 22,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 1,
      "third_level_category": 3,
      "description": "Recommendation Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np\r\n\r\ndata \u003d pd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\u0027data.csv\u0027\u003c/span\u003e)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#number of unique users in the dataset\u003c/span\u003e\r\nlen(data.Id.unique())\r\nlen(data.column.unique())\r\n\r\nuser_data\u003d data.pivot(index\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027Id\u0027\u003c/span\u003e,\r\n                                 columns\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027column\u0027\u003c/span\u003e,\r\n                                 values\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027result\u0027\u003c/span\u003e).reset_index(drop\u003dTrue)\r\n\r\n\r\nuser_data.index \u003d data.Id.unique()\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Calculating Cosine Similarity between Users\u003c/span\u003e\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pairwise_distances\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e scipy.spatial.distance \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e cosine, correlation\r\n\r\nuser_data \u003d \u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e - pairwise_distances( user_data.values,metric\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027cosine\u0027\u003c/span\u003e)\r\n\r\n\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Store the results in a dataframe\u003c/span\u003e\r\nuser_data \u003d pd.DataFrame(user_data)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Set the index and column names to user ids \u003c/span\u003e\r\nuser_data.index \u003d data.Id.unique()\r\nuser_data.columns \u003d data.Id.unique()\r\n\r\nuser_sim_df.iloc[\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\nnp.fill_diagonal(user_data, \u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e)\r\nuser_data.iloc[\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#Most Similar Users\u003c/span\u003e\r\nuser_data.idxmax(axis\u003d\u003cspan class\u003d\"hljs-number\"\u003e1\u003c/span\u003e)[\u003cspan class\u003d\"hljs-number\"\u003e0\u003c/span\u003e:\u003cspan class\u003d\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\r\ndata[(data[\u003cspan class\u003d\"hljs-string\"\u003e\u0027Id\u0027\u003c/span\u003e]\u003d\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e) | (data[\u003cspan class\u003d\"hljs-string\"\u003e\u0027ID\u0027\u003c/span\u003e]\u003d\u003d\u003cspan class\u003d\"hljs-number\"\u003e120\u003c/span\u003e)]\r\n\r\nuser_1\u003ddata[data[\u003cspan class\u003d\"hljs-string\"\u003e\u0027Id\u0027\u003c/span\u003e]\u003d\u003d\u003cspan class\u003d\"hljs-number\"\u003e6\u003c/span\u003e]\r\n\r\nuser_2\u003ddata[data[\u003cspan class\u003d\"hljs-string\"\u003e\u0027Id\u0027\u003c/span\u003e]\u003d\u003d\u003cspan class\u003d\"hljs-number\"\u003e10\u003c/span\u003e]\r\n\r\n\r\npd.merge(user_1,user_2,\u003cspan class\u003d\"hljs-literal\"\u003eon\u003c/span\u003e\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027result\u0027\u003c/span\u003e,how\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027outer\u0027\u003c/span\u003e)",
      "language": "Python",
      "scope_of_work": "Scope 2",
      "code_file": "",
      "timestamp": "2022-02-20T05:03:16.022Z",
      "liked_by": []
    }
  },
  {
    "model": "post.skeletonpost",
    "pk": 23,
    "fields": {
      "user": 4,
      "first_level_category": 1,
      "second_level_category": 2,
      "third_level_category": 5,
      "fourth_level_category": 4,
      "description": "Linear Regression Skeleton Code",
      "image1": "",
      "image2": "",
      "image3": "",
      "image4": "",
      "image5": "",
      "skeleton_code": "\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e pandas \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e pd \r\n\r\ndata\u003dpd.read_csv(\u003cspan class\u003d\"hljs-string\"\u003e\"data.csv\"\u003c/span\u003e)\r\n\r\n\r\ndata.corr()\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e statsmodels.formula.api \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e smf\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np \r\n\r\nmodel\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\"Y~X\"\u003c/span\u003e,data\u003ddata).fit()\r\n\r\nsns.regplot(x\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027X\u0027\u003c/span\u003e,y\u003d\u003cspan class\u003d\"hljs-string\"\u003e\u0027Y\u0027\u003c/span\u003e,data\u003ddata)\r\n\r\nmodel.params\r\n\r\n\u003cspan class\u003d\"hljs-built_in\"\u003eprint\u003c/span\u003e(model.tvalues,\u003cspan class\u003d\"hljs-string\"\u003e\u0027\\n\u0027\u003c/span\u003e,model.pvalues)\r\n\r\n(model.rsquared,model.rsquared_adj)\r\n\r\n\u003cspan class\u003d\"hljs-comment\"\u003e#tranformation technique \u003c/span\u003e\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np \r\n\r\nx\u003dnp.log(data.YearsExperience)\r\nmodel\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\"Y~np.log(data.X)\"\u003c/span\u003e,data\u003ddata).fit()\r\n\r\npred1\u003dmodel.predict(np.log(data.X))\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e mean_squared_error\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e math \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e sqrt \r\n\r\nrmse\u003dsqrt(mean_squared_error(data.X,pred1))\r\n\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class\u003d\"hljs-keyword\"\u003eas\u003c/span\u003e np \r\n\r\nx\u003dnp.sqrt(data.X)\r\nmodel\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\"Y~np.sqrt(data.X)\"\u003c/span\u003e,data\u003ddata).fit()\r\n\r\npred2\u003dmodel.predict(np.sqrt(data.X))\r\n\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e sklearn.metrics \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e mean_squared_error\r\n\u003cspan class\u003d\"hljs-keyword\"\u003efrom\u003c/span\u003e math \u003cspan class\u003d\"hljs-keyword\"\u003eimport\u003c/span\u003e sqrt \r\n\r\nrmse\u003dsqrt(mean_squared_error,(data.X,pred2))\r\n\r\nx\u003dnp.exp(data.X)\r\nmodel\u003dsmf.ols(\u003cspan class\u003d\"hljs-string\"\u003e\"Y~np.exp(X)\"\u003c/span\u003e,data\u003ddata).fit()\r\n\r\npred3\u003dmodel.predict(np.exp(data.X))\r\n\r\nrmse\u003dsqrt(mean_squared_error(data.X,pred3))",
      "language": "Python",
      "scope_of_work": "Scope 1",
      "code_file": "",
      "timestamp": "2022-02-20T05:28:17.849Z",
      "liked_by": []
    }
  },
  {
    "model": "post.flaginappropriate",
    "pk": 1,
    "fields": {
      "user": 1,
      "post": 19,
      "reason": "other",
      "timestamp": "2022-01-30T07:21:18.310Z"
    }
  },
  {
    "model": "post.flaginappropriate",
    "pk": 2,
    "fields": {
      "user": 1,
      "post": 15,
      "reason": "tset",
      "timestamp": "2022-02-15T07:17:01.430Z"
    }
  },
  {
    "model": "post.bookmark",
    "pk": 7,
    "fields": {
      "user": 6,
      "post": 18,
      "timestamp": "2022-02-03T07:25:58.294Z"
    }
  },
  {
    "model": "post.bookmark",
    "pk": 11,
    "fields": {
      "user": 3,
      "post": 19,
      "timestamp": "2022-02-09T09:23:05.954Z"
    }
  },
  {
    "model": "post.bookmark",
    "pk": 18,
    "fields": {
      "user": 6,
      "post": 19,
      "timestamp": "2022-02-15T02:43:47.275Z"
    }
  },
  {
    "model": "post.bookmark",
    "pk": 19,
    "fields": {
      "user": 6,
      "post": 16,
      "timestamp": "2022-02-15T02:44:09.222Z"
    }
  },
  {
    "model": "post.bookmark",
    "pk": 20,
    "fields": {
      "user": 3,
      "post": 18,
      "timestamp": "2022-02-15T07:15:54.501Z"
    }
  },
  {
    "model": "post.bookmark",
    "pk": 22,
    "fields": {
      "user": 6,
      "post": 30,
      "timestamp": "2022-07-03T05:23:13.022Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 13,
    "fields": {
      "user": 3,
      "post": 16,
      "comment": "first comment",
      "timestamp": "2022-02-27T04:49:05.016Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 14,
    "fields": {
      "user": 3,
      "post": 16,
      "comment": "second cmt",
      "timestamp": "2022-02-27T05:06:19.320Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 15,
    "fields": {
      "user": 1,
      "post": 23,
      "comment": "Nice",
      "timestamp": "2022-02-27T15:05:01.503Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 16,
    "fields": {
      "user": 1,
      "post": 16,
      "comment": "test",
      "timestamp": "2022-02-27T15:06:19.450Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 17,
    "fields": {
      "user": 1,
      "post": 16,
      "comment": "test",
      "timestamp": "2022-02-27T15:06:24.059Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 18,
    "fields": {
      "user": 1,
      "post": 16,
      "comment": "new",
      "timestamp": "2022-02-27T15:06:42.798Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 19,
    "fields": {
      "user": 3,
      "post": 24,
      "comment": "test",
      "timestamp": "2022-02-28T05:26:04.842Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 20,
    "fields": {
      "user": 46,
      "post": 24,
      "comment": ".",
      "timestamp": "2022-04-20T06:37:51.245Z"
    }
  },
  {
    "model": "post.postcomment",
    "pk": 21,
    "fields": {
      "user": 46,
      "post": 28,
      "comment": ".",
      "timestamp": "2022-04-20T06:41:34.761Z"
    }
  }
]