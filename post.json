[{"model": "post.scope", "pk": 1, "fields": {"name": "Machine Learning", "icon": "fas fa-globe"}}, {"model": "post.scope", "pk": 2, "fields": {"name": "Deep Learning", "icon": "fas fa-globe"}}, {"model": "post.scope", "pk": 3, "fields": {"name": "Coding", "icon": "fas fa-globe"}}, {"model": "post.scope", "pk": 4, "fields": {"name": "Artificial Intelligence", "icon": "fas fa-globe"}}, {"model": "post.language", "pk": 1, "fields": {"name": "Python", "icon": "mdi mdi-language-python"}}, {"model": "post.language", "pk": 2, "fields": {"name": "R", "icon": "mdi mdi-language-r"}}, {"model": "post.language", "pk": 3, "fields": {"name": "Julia", "icon": "mdi mdi-code-not-equal-variant"}}, {"model": "post.category", "pk": 1, "fields": {"name": "Questions /Errors", "icon": "mdi mdi-comment-question-outline"}}, {"model": "post.category", "pk": 2, "fields": {"name": "Dicussions /Informative", "icon": "mdi mdi-information-outline"}}, {"model": "post.post", "pk": 15, "fields": {"user": 2, "category": 1, "description": "Having Issue with file handing \r\n#", "image1": "post_image/temp_7AkKPyY.jpg", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "", "language": 1, "scope_of_work": 1, "timestamp": "2021-12-29T18:11:37.443Z", "code": "<span class=\"hljs-comment\"># a file named \"geek\", will be opened with the reading mode.</span>\r\nfile = <span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">'geek.txt'</span>, <span class=\"hljs-string\">'r'</span>)\r\n<span class=\"hljs-comment\"># This will print every line one by one in the file</span>\r\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">each</span> in file:\r\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-keyword\">each</span>)", "liked_by": [2, 1, 6]}}, {"model": "post.post", "pk": 16, "fields": {"user": 1, "category": 2, "description": "Use the scatter() method to draw a scatter plot diagram:\n#", "image1": "post_image/temp_fBoWH5W.jpg", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 3, "scope_of_work": 3, "timestamp": "2021-12-29T18:14:13.498Z", "code": "<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nx = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">6</span>]\ny = [<span class=\"hljs-number\">99</span>,<span class=\"hljs-number\">86</span>,<span class=\"hljs-number\">87</span>,<span class=\"hljs-number\">88</span>,<span class=\"hljs-number\">111</span>,<span class=\"hljs-number\">86</span>,<span class=\"hljs-number\">103</span>,<span class=\"hljs-number\">87</span>,<span class=\"hljs-number\">94</span>,<span class=\"hljs-number\">78</span>,<span class=\"hljs-number\">77</span>,<span class=\"hljs-number\">85</span>,<span class=\"hljs-number\">86</span>]\n\nplt.scatter(x, y)\nplt.show()", "liked_by": [2, 27, 1]}}, {"model": "post.post", "pk": 18, "fields": {"user": 6, "category": 1, "description": "", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 1, "timestamp": "2022-01-04T11:52:28.884Z", "code": " <span class=\"hljs-keyword\">import</span> React, {useEffect, useState} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-comment\">// import axios from \"axios\";</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./axios\"</span>;\n<span class=\"hljs-keyword\">import</span> Table <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Table'</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Data</span>(<span class=\"hljs-params\"></span>) </span>{\n\n    <span class=\"hljs-keyword\">const</span>[people,setPeople]= useState([]);\n    <span class=\"hljs-comment\">// useEffect(() =&gt;{</span>\n    <span class=\"hljs-comment\">//     async function fetchData() {</span>\n    <span class=\"hljs-comment\">//         const req = await axios.get(\"/All\");</span>\n\n    <span class=\"hljs-comment\">//         setPeople(req.data);</span>\n    <span class=\"hljs-comment\">//     }</span>\n\n    <span class=\"hljs-comment\">//     fetchData();</span>\n    <span class=\"hljs-comment\">// }, []);</span>", "liked_by": [1, 5]}}, {"model": "post.post", "pk": 19, "fields": {"user": 1, "category": 2, "description": "test", "image1": "post_image/temp_i1vvxSu.jpg", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 2, "timestamp": "2022-01-04T12:46:29.689Z", "code": null, "liked_by": [2, 9, 1, 3]}}, {"model": "post.post", "pk": 21, "fields": {"user": 5, "category": 1, "description": "I have the code\r\n#\r\n\r\n#\r\n\r\nwhat should I", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 3, "timestamp": "2022-02-22T07:21:08.646Z", "code": "mydict = {\"layer1\" : { 0: 0.765}, 'layer2': {0: 0.9876}}\r\nfor idx in range(5):\r\n   mydict[<span class=\"hljs-string\">'layer1'</span>][<span class=\"hljs-symbol\">idx</span>] = idx + 900\r\n   mydict[<span class=\"hljs-string\">'layer2'</span>][<span class=\"hljs-symbol\">idx</span>] = idx + 800\r\nsorted_x = sorted(mydict.items(), key=lambda kv: kv[1])\r\nit gives the error\r\n\r\nTypeError: '<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">'</span> <span class=\"hljs-attr\">not</span> <span class=\"hljs-attr\">supported</span> <span class=\"hljs-attr\">between</span> <span class=\"hljs-attr\">instances</span> <span class=\"hljs-attr\">of</span> '<span class=\"hljs-attr\">dict</span>' <span class=\"hljs-attr\">and</span> '<span class=\"hljs-attr\">dict</span>'\r\n\r\n<span class=\"hljs-attr\">when</span> <span class=\"hljs-attr\">I</span> <span class=\"hljs-attr\">type</span>\r\n\r\n<span class=\"hljs-attr\">sorted_x</span> = <span class=\"hljs-string\">sorted(mydict.items(),</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">lambda</span> <span class=\"hljs-attr\">kv:</span> <span class=\"hljs-attr\">kv</span>[<span class=\"hljs-attr\">2</span>])\r\n<span class=\"hljs-attr\">it</span> <span class=\"hljs-attr\">gives</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">error</span>\r\n\r\n<span class=\"hljs-attr\">IndexError:</span> <span class=\"hljs-attr\">tuple</span> <span class=\"hljs-attr\">index</span> <span class=\"hljs-attr\">out</span> <span class=\"hljs-attr\">of</span> <span class=\"hljs-attr\">range</span>\r\n\r\n<span class=\"hljs-attr\">it</span> <span class=\"hljs-attr\">onley</span> <span class=\"hljs-attr\">works</span> <span class=\"hljs-attr\">for</span> <span class=\"hljs-attr\">index</span> <span class=\"hljs-attr\">0</span> <span class=\"hljs-attr\">which</span> <span class=\"hljs-attr\">is</span> <span class=\"hljs-attr\">a</span> <span class=\"hljs-attr\">string</span>!\r\n\r\n<span class=\"hljs-attr\">I</span> <span class=\"hljs-attr\">want</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">dictionary</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">be</span> <span class=\"hljs-attr\">sorted</span> <span class=\"hljs-attr\">based</span> <span class=\"hljs-attr\">on</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">value</span> <span class=\"hljs-attr\">and</span> <span class=\"hljs-attr\">give</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">results</span> <span class=\"hljs-attr\">like</span>\r\n\r\n[('<span class=\"hljs-attr\">layer2</span>', {<span class=\"hljs-attr\">0:</span> <span class=\"hljs-attr\">800</span>, <span class=\"hljs-attr\">1:</span> <span class=\"hljs-attr\">801</span>, <span class=\"hljs-attr\">2:</span> <span class=\"hljs-attr\">802</span>, <span class=\"hljs-attr\">3:</span> <span class=\"hljs-attr\">803</span>, <span class=\"hljs-attr\">4:</span> <span class=\"hljs-attr\">804</span>}), ('<span class=\"hljs-attr\">layer2</span>', {<span class=\"hljs-attr\">0:</span> <span class=\"hljs-attr\">900</span>, <span class=\"hljs-attr\">1:</span> <span class=\"hljs-attr\">901</span>, <span class=\"hljs-attr\">2:</span> <span class=\"hljs-attr\">902</span>, <span class=\"hljs-attr\">3:</span> <span class=\"hljs-attr\">903</span>, <span class=\"hljs-attr\">4:</span> <span class=\"hljs-attr\">904</span>})]</span></span>", "liked_by": []}}, {"model": "post.post", "pk": 22, "fields": {"user": 6, "category": 1, "description": "ow to  install rasa on windows  8.1 please help its giving me error \r\n\r\n#\r\n #  rasa init is not getting execu", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 2, "timestamp": "2022-02-26T03:06:33.091Z", "code": "pip <span class=\"hljs-keyword\">install</span> rasa \r\nrasa init", "liked_by": [4]}}, {"model": "post.post", "pk": 23, "fields": {"user": 6, "category": 2, "description": "Started building chatbots using rasa .\r\nCame across with with a wonderful document given by rasa .It is self explanatory and very easy to understand .\r\n\r\nDo check it out \r\n------ https://rasa.com/docs/rasa/", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 2, "timestamp": "2022-02-26T03:32:39.469Z", "code": null, "liked_by": [27, 30, 4]}}, {"model": "post.post", "pk": 24, "fields": {"user": 27, "category": 2, "description": "I'm completely new here. But yaa will find new ways and ideas in coding world...!!!", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 3, "timestamp": "2022-02-26T12:17:09.306Z", "code": null, "liked_by": [30, 39, 63, 6, 5]}}, {"model": "post.post", "pk": 27, "fields": {"user": 5, "category": 2, "description": "What Exactly are Stellar AI Code-rooms?\r\n\r\nStellar AI Code-room is an exclusive functionality/product/service created and provided by Stellar AI.\r\nThese are a few features/advantages/use-cases of the code-rooms -\r\n1) Live real time Audio, Video and chat features for users inside the AI code-room / meeting, while coding live and real time.\r\n2) Live real time Collaborative Coding Interface where all the different Machine Learning / Deep Learning / AI Libraries are provided in the Coding Interface.\r\n3) Python coders/students/developers/employees/companies anyone can come here add send and accept friend requests of other users and add them in a code-room and use this unique code-room for growth.\r\n4) Every Code-room has an admin who has the power to add/remove ‘n’ number of users.\r\n5) In the absence of the admin still all the code-room members can code and run algorithms.\r\n6) National-International users can connect very easily just by sending/accepting a friend request and start doing projects together.\r\n7) Students when own a code-room, can add and remove whoever they want(teachers/mentors/friends) and learn and grow at Data Science according to their pace.\r\n8) Students/Enthusiasts who have absolutely no knowledge about Python/Machine Learning/Neural Networks can become an admin in these code-rooms and add mentors to learn real time Data Science.\r\n9) Enjoy this mix of social media and Data Science journey and grow together.", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 4, "timestamp": "2022-03-09T10:21:08.088Z", "code": null, "liked_by": [39]}}, {"model": "post.post", "pk": 28, "fields": {"user": 46, "category": 2, "description": "  ", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 2, "scope_of_work": 1, "timestamp": "2022-04-20T06:40:54.820Z", "code": null, "liked_by": [46, 5]}}, {"model": "post.post", "pk": 30, "fields": {"user": 5, "category": 1, "description": "Does someone know how to do Decision Trees?", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 1, "timestamp": "2022-06-30T08:41:52.881Z", "code": null, "liked_by": []}}, {"model": "post.post", "pk": 31, "fields": {"user": 6, "category": 1, "description": "how to work on random forest ?", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 1, "timestamp": "2022-07-01T07:35:11.655Z", "code": null, "liked_by": [60, 76, 63]}}, {"model": "post.post", "pk": 32, "fields": {"user": 89, "category": 2, "description": "I am looking for job as data sciencetist position ", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": null, "language": 1, "scope_of_work": 1, "timestamp": "2022-09-28T17:11:23.568Z", "code": null, "liked_by": []}}, {"model": "post.firstlevelcategory", "pk": 1, "fields": {"name": "Machine learning"}}, {"model": "post.firstlevelcategory", "pk": 2, "fields": {"name": "NLP (Natural Language Processing)"}}, {"model": "post.firstlevelcategory", "pk": 3, "fields": {"name": "Forecasting"}}, {"model": "post.firstlevelcategory", "pk": 4, "fields": {"name": "Deep Learning"}}, {"model": "post.secondlevelcategory", "pk": 1, "fields": {"name": "Unsupervised", "first_category": 1}}, {"model": "post.secondlevelcategory", "pk": 2, "fields": {"name": "Supervised", "first_category": 1}}, {"model": "post.secondlevelcategory", "pk": 3, "fields": {"name": "Basic NLP", "first_category": 2}}, {"model": "post.secondlevelcategory", "pk": 4, "fields": {"name": "Named Entity Recognition", "first_category": 2}}, {"model": "post.secondlevelcategory", "pk": 5, "fields": {"name": "Sentiment Analysis", "first_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 1, "fields": {"name": "Clustering", "first_category": 1, "second_category": 1}}, {"model": "post.thirdlevelcategory", "pk": 2, "fields": {"name": "Association Rules", "first_category": 1, "second_category": 1}}, {"model": "post.thirdlevelcategory", "pk": 3, "fields": {"name": "Recommendation", "first_category": 1, "second_category": 1}}, {"model": "post.thirdlevelcategory", "pk": 4, "fields": {"name": "PCA", "first_category": 1, "second_category": 1}}, {"model": "post.thirdlevelcategory", "pk": 5, "fields": {"name": "Regression", "first_category": 1, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 6, "fields": {"name": "Decision Tree", "first_category": 1, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 7, "fields": {"name": "RNN", "first_category": 4, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 8, "fields": {"name": "CNN", "first_category": 4, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 9, "fields": {"name": "ANN", "first_category": 4, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 10, "fields": {"name": "KNN", "first_category": 1, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 11, "fields": {"name": "SVM", "first_category": 1, "second_category": 2}}, {"model": "post.thirdlevelcategory", "pk": 12, "fields": {"name": "TSNE", "first_category": 1, "second_category": 1}}, {"model": "post.fourthlevelcategory", "pk": 1, "fields": {"name": "Hierarchical", "first_category": 1, "second_category": 1, "third_category": 1}}, {"model": "post.fourthlevelcategory", "pk": 2, "fields": {"name": "K-means", "first_category": 1, "second_category": 1, "third_category": 1}}, {"model": "post.fourthlevelcategory", "pk": 3, "fields": {"name": "DBSCAN", "first_category": 1, "second_category": 1, "third_category": 1}}, {"model": "post.fourthlevelcategory", "pk": 4, "fields": {"name": "Linear Regression", "first_category": 1, "second_category": 2, "third_category": 5}}, {"model": "post.fourthlevelcategory", "pk": 5, "fields": {"name": "Multi linear Regression", "first_category": 1, "second_category": 2, "third_category": 5}}, {"model": "post.fourthlevelcategory", "pk": 6, "fields": {"name": "Logistic Regression", "first_category": 1, "second_category": 2, "third_category": 5}}, {"model": "post.fourthlevelcategory", "pk": 7, "fields": {"name": "Bagging", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 8, "fields": {"name": "Boosting", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 9, "fields": {"name": "Stacking", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 10, "fields": {"name": "Random Forest", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 11, "fields": {"name": "LGBM", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 12, "fields": {"name": "XGBM", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 13, "fields": {"name": "Catboost", "first_category": 1, "second_category": 2, "third_category": 6}}, {"model": "post.fourthlevelcategory", "pk": 19, "fields": {"name": "LSTM", "first_category": 4, "second_category": 2, "third_category": 7}}, {"model": "post.fourthlevelcategory", "pk": 20, "fields": {"name": "BI-Directional LSTM", "first_category": 4, "second_category": 2, "third_category": 7}}, {"model": "post.skeletonpost", "pk": 5, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 5, "fourth_level_category": 5, "description": "Multi linear Regression Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"coffeescript\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd \r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \r\n<span class=\"hljs-keyword\">import</span> statsmodels.graphics.regressionplots <span class=\"hljs-keyword\">as</span> influence_plots \r\n<span class=\"hljs-keyword\">import</span> statsmodels.formula.api <span class=\"hljs-keyword\">as</span> smf \r\n\r\n<span class=\"hljs-keyword\">import</span> os \r\nos.getcwd()\r\n\r\ndata=pd.read_csv(<span class=\"hljs-string\">\"Multilinear reg.csv\"</span>)\r\n\r\ndata.head()\r\n\r\ndata.info()\r\n\r\ndata.isna().sum()\r\n\r\ndata.corr()           <span class=\"hljs-comment\">#to find correlation</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sns <span class=\"hljs-comment\">#get scatter plot </span>\r\n\r\nsns.set_style(<span class=\"hljs-string\">'darkgrid'</span>)\r\nsns.pairplot(data)\r\n\r\n<span class=\"hljs-keyword\">import</span> statsmodels.formula.api <span class=\"hljs-keyword\">as</span> smf\r\n\r\nmodel = smf.ols(<span class=\"hljs-string\">'Y~X1+X2+X3+X4'</span>,data=data).fit()\r\n\r\n<span class=\"hljs-built_in\">print</span>(model.tvalues,<span class=\"hljs-string\">'\\n'</span>,model.pvalues)\r\n\r\nmodel.params\r\n\r\n(model.rsquared,model.rsquared_adj)\r\n\r\n<span class=\"hljs-comment\">#CALCULATE VIF</span>\r\n\r\nrsp_X1=smf.ols(<span class=\"hljs-string\">'X1~X2+X3+X4'</span>,data=data).fit().rsquared\r\nvif_X1 = <span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">1</span>-rsp_X1)\r\n\r\n\r\nrsp_X2=smf.ols(<span class=\"hljs-string\">'X2~X1+X3+X4'</span>,data=data).fit().rsquared\r\nvif_X2 = <span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">1</span>-rsp_X2)\r\n\r\n\r\nrsp_X3=smf.ols(<span class=\"hljs-string\">'X3~X1+X2+X4'</span>,data=data).fit().rsquared\r\nvif_X3 = <span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">1</span>-rsp_X3)\r\n\r\n\r\nrsp_X4=smf.ols(<span class=\"hljs-string\">'X4~X1+X2+X3'</span>,data=data).fit().rsquared\r\nvif_X4 = <span class=\"hljs-number\">1</span>/(<span class=\"hljs-number\">1</span>-rsp_X4)\r\n\r\nd1={<span class=\"hljs-string\">'Variables'</span>:[<span class=\"hljs-string\">'X1'</span>,<span class=\"hljs-string\">'X2'</span>,<span class=\"hljs-string\">'X3'</span>,<span class=\"hljs-string\">'X4'</span>],<span class=\"hljs-string\">'VIF'</span>:[vif_X1,vif_X2,vif_X3,vif_X4]}\r\n\r\nVif_frame=pd.DataFrame(d1)\r\nVif_frame\r\n\r\n\r\n\r\n\r\n<span class=\"hljs-comment\">#high influence plot </span>\r\n\r\n<span class=\"hljs-keyword\">from</span> statsmodels.graphics.regressionplots <span class=\"hljs-keyword\">import</span> influence_plot\r\ninfluence_plot(model)\r\nplt.show()\r\n\r\nk = data.shape[<span class=\"hljs-number\">1</span>]\r\nn = data.shape[<span class=\"hljs-number\">0</span>]\r\nleverage_cutoff = <span class=\"hljs-number\">3</span>*((k + <span class=\"hljs-number\">1</span>)/n)\r\n\r\n<span class=\"hljs-comment\">#data point 48,49 are influencers</span>\r\n\r\ndata[data.index.isin([<span class=\"hljs-number\">48</span>,<span class=\"hljs-number\">49</span>])]\r\n\r\ndata1=data\r\ndata\r\n\r\n<span class=\"hljs-comment\">#improve the model</span>\r\n\r\ndata_new=data1\r\ndata_new.head()\r\n\r\n<span class=\"hljs-comment\">#Discard the data points which are influencers and reasign the row number (reset_index())</span>\r\ndata2=data_new.drop(data_new.index[[<span class=\"hljs-number\">48</span>,<span class=\"hljs-number\">49</span>]],axis=<span class=\"hljs-number\">0</span>).reset_index()\r\n\r\ndata2\r\n\r\nfinal_ms= smf.ols(<span class=\"hljs-string\">'Y~X1+X2+X3'</span>,data =data2).fit()\r\nfinal_ms\r\n\r\n(final_ms.rsquared,final_ms.aic)\r\n\r\n(final_st.rsquared,final_st.aic)\r\n\r\n<span class=\"hljs-comment\">#cooks distance </span>\r\n\r\nmodel_influence_V = final_ms.get_influence()\r\n(c_V, _) = model_influence_V.cooks_distance\r\n\r\nfig= plt.subplots(figsize=(<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">7</span>))\r\nplt.stem(np.arange(len(data2)),np.round(c_V,<span class=\"hljs-number\">3</span>));\r\nplt.xlabel(<span class=\"hljs-string\">'Row index'</span>)\r\nplt.ylabel(<span class=\"hljs-string\">'Cooks Distance'</span>);\r\n\r\n<span class=\"hljs-comment\">#index of the data points where c is more than .5</span>\r\n(np.argmax(c_V),np.max(c_V))\r\n\r\n(final_ms.rsquared,final_ms.aic)\r\n\r\nfinal_ms.predict(data)\r\n\r\n\r\n\r\nfinal_ms.predict(data1.iloc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>,])\r\n\r\npred_y = final_ms.predict(data1)\r\npred_y\r\n\r\n</span>", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-18T05:38:36.931Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 6, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 5, "fourth_level_category": 6, "description": "Logistic Regression Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd \r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\ndata=pd.read_csv(<span class=\"hljs-string\">\"Logistic_reg.csv\"</span>)\r\n\r\ndata.head()\r\n\r\ndata.shape\r\n\r\nX = data.iloc[:,<span class=\"hljs-number\">1</span>:]\r\nY = data.iloc[<span class=\"hljs-number\">0</span>:,<span class=\"hljs-number\">-5</span>]\r\n\r\nX\r\n\r\nY\r\n\r\nclassifier=LogisticRegression()\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\r\n\r\nclassifier=LogisticRegression()\r\nclassifier.fit(X,Y)\r\n\r\n\r\n<span class=\"hljs-comment\">#Predict for X dataset</span>\r\ny_pred = classifier.predict(X)\r\n\r\ny_pred_df= pd.DataFrame({<span class=\"hljs-string\">'actual'</span>: Y,\r\n                         <span class=\"hljs-string\">'predicted_prob'</span>: classifier.predict(X)})\r\ny_pred_df\r\n\r\n\r\n<span class=\"hljs-comment\"># Confusion Matrix for the model accuracy</span>\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> confusion_matrix\r\nconfusion_matrix = confusion_matrix(Y,y_pred)\r\n<span class=\"hljs-built_in\">print</span> (confusion_matrix)\r\n\r\n<span class=\"hljs-comment\">#Classification report</span>\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> classification_report\r\n<span class=\"hljs-built_in\">print</span>(classification_report(Y,y_pred))\r\n\r\n\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> roc_curve\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> roc_auc_score\r\n\r\nfpr, tpr, thresholds = roc_curve(Y, classifier.predict_proba (X)[:,<span class=\"hljs-number\">1</span>])\r\n\r\nauc = roc_auc_score(Y, y_pred)\r\n\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\r\nplt.plot(fpr, tpr, color=<span class=\"hljs-string\">'red'</span>, label=<span class=\"hljs-string\">'logit model ( area  = %0.2f)'</span>%auc)\r\nplt.plot([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">'k--'</span>)\r\nplt.xlabel(<span class=\"hljs-string\">'False Positive Rate or [1 - True Negative Rate]'</span>)\r\nplt.ylabel(<span class=\"hljs-string\">'True Positive Rate'</span>)", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-18T07:11:57.487Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 7, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 7, "description": "Bagging Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\"># Bagged Decision Trees for Classification</span>\r\n<span class=\"hljs-keyword\">from</span> pandas <span class=\"hljs-keyword\">import</span> read_csv\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> KFold\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> cross_val_score\r\n<span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> BaggingClassifier\r\n<span class=\"hljs-keyword\">from</span> sklearn.tree <span class=\"hljs-keyword\">import</span> DecisionTreeClassifier\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"Bagging_data.csv\"</span>)\r\narray = data.values\r\nX = array[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = array[:,<span class=\"hljs-number\">5</span>]\r\nseed = <span class=\"hljs-number\">7</span>\r\n\r\nkfold = KFold(n_splits=<span class=\"hljs-number\">5</span>, random_state=seed)\r\ncart = DecisionTreeClassifier()\r\nnum_trees = <span class=\"hljs-number\">200</span>\r\nmodel = BaggingClassifier(base_estimator=cart, n_estimators=num_trees, random_state=seed)\r\nresults = cross_val_score(model, X, Y, cv=kfold)\r\n<span class=\"hljs-built_in\">print</span>(results.mean())", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T05:46:31.897Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 8, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 8, "description": "Boosting Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\"># AdaBoost Classification</span>\r\n<span class=\"hljs-keyword\">from</span> pandas <span class=\"hljs-keyword\">import</span> read_csv\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> KFold\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> cross_val_score\r\n<span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> AdaBoostClassifier\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"Boosting.csv\"</span>)\r\narray = data.values\r\n\r\nX = array[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = array[:,<span class=\"hljs-number\">5</span>]\r\n\r\nnum_trees = <span class=\"hljs-number\">10</span>\r\nseed=<span class=\"hljs-number\">7</span>\r\nkfold = KFold(n_splits=<span class=\"hljs-number\">10</span>, random_state=seed)\r\nmodel = AdaBoostClassifier(n_estimators=num_trees, random_state=seed)\r\nresults = cross_val_score(model, X, Y, cv=kfold)\r\n<span class=\"hljs-built_in\">print</span>(results.mean())", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T10:10:43.265Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 9, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 9, "description": "Stacking Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\"># Stacking Ensemble for Classification</span>\r\n<span class=\"hljs-keyword\">from</span> pandas <span class=\"hljs-keyword\">import</span> read_csv\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> KFold\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> cross_val_score\r\n<span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\r\n<span class=\"hljs-keyword\">from</span> sklearn.tree <span class=\"hljs-keyword\">import</span> DecisionTreeClassifier\r\n<span class=\"hljs-keyword\">from</span> sklearn.svm <span class=\"hljs-keyword\">import</span> SVC\r\n<span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> VotingClassifier\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"Stacking.csv\"</span>)\r\narray = data.values\r\nX = array[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = array[:,<span class=\"hljs-number\">5</span>]\r\nkfold = KFold(n_splits=<span class=\"hljs-number\">10</span>, random_state=<span class=\"hljs-number\">7</span>)\r\n\r\n<span class=\"hljs-comment\"># create the sub models</span>\r\nestimators = []\r\nmodel1 = LogisticRegression(max_iter=<span class=\"hljs-number\">500</span>)\r\nestimators.append((<span class=\"hljs-string\">'logistic'</span>, model1))\r\nmodel2 = DecisionTreeClassifier()\r\nestimators.append((<span class=\"hljs-string\">'cart'</span>, model2))\r\nmodel3 = SVC()\r\nestimators.append((<span class=\"hljs-string\">'svm'</span>, model3))\r\n\r\n<span class=\"hljs-comment\"># create the ensemble model</span>\r\nensemble = VotingClassifier(estimators)\r\nresults = cross_val_score(ensemble, X, Y, cv=kfold)\r\n<span class=\"hljs-built_in\">print</span>(results.mean())", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T10:15:02.001Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 10, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 10, "description": "Random Forest Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\"># Random Forest Classification</span>\r\n<span class=\"hljs-keyword\">from</span> pandas <span class=\"hljs-keyword\">import</span> read_csv\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> KFold\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> cross_val_score\r\n<span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> RandomForestClassifier\r\ndata=pd.read_csv(<span class=\"hljs-string\">\"Random_forest.csv\"</span>)\r\narray=data.values\r\nX = array[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = array[:,<span class=\"hljs-number\">5</span>]\r\nnum_trees = <span class=\"hljs-number\">100</span>\r\nmax_features = <span class=\"hljs-number\">3</span>\r\nkfold = KFold(n_splits=<span class=\"hljs-number\">10</span>, random_state=<span class=\"hljs-number\">7</span>)\r\nmodel = RandomForestClassifier(n_estimators=num_trees, max_features=max_features)\r\nresults = cross_val_score(model, X, Y, cv=kfold)\r\n<span class=\"hljs-built_in\">print</span>(results.mean())", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T10:17:22.198Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 11, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 12, "description": "XGBM Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\"># First XGBoost model for Pima Indians dataset</span>\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd \r\n<span class=\"hljs-keyword\">from</span> xgboost <span class=\"hljs-keyword\">import</span> XGBClassifier\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> accuracy_score\r\n\r\n\r\n<span class=\"hljs-comment\"># load data</span>\r\ndataset = pd.read_csv(<span class=\"hljs-string\">\"XGBM.csv\"</span>)\r\n<span class=\"hljs-comment\"># split data into X and y</span>\r\nX = dataset[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = dataset[:,<span class=\"hljs-number\">5</span>]\r\n\r\n\r\n<span class=\"hljs-comment\"># split data into train and test sets</span>\r\nseed = <span class=\"hljs-number\">7</span>\r\ntest_size = <span class=\"hljs-number\">0.33</span>\r\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\r\n\r\n\r\n<span class=\"hljs-comment\"># fit model no training data</span>\r\nmodel = XGBClassifier()\r\nmodel.fit(X_train, y_train)\r\n\r\n\r\n<span class=\"hljs-comment\"># make predictions for test data</span>\r\ny_pred = model.predict(X_test)\r\npredictions = [round(value) <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> y_pred]\r\n\r\n\r\n<span class=\"hljs-comment\"># evaluate predictions</span>\r\naccuracy = accuracy_score(y_test, predictions)\r\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy: %.2f%%\"</span> % (accuracy * <span class=\"hljs-number\">100.0</span>))", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T10:58:19.006Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 12, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 11, "description": "LGBM Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n\r\n\r\n<span class=\"hljs-comment\"># Importing the dataset</span>\r\ndataset = pd.read_csv(<span class=\"hljs-string\">'LGBM.csv'</span>)\r\n<span class=\"hljs-comment\"># split data into X and y</span>\r\nX = dataset.iloc[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = dataset.iloc[:,<span class=\"hljs-number\">5</span>]\r\n\r\n\r\n<span class=\"hljs-comment\"># Splitting the dataset into the Training set and Test set</span>\r\n\r\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = <span class=\"hljs-number\">0.2</span>, random_state = <span class=\"hljs-number\">0</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> lightgbm <span class=\"hljs-keyword\">as</span> lgb\r\nd_train = lgb.Dataset(x_train, label=y_train)\r\n\r\nparams = {}\r\nparams[<span class=\"hljs-string\">'learning_rate'</span>] = <span class=\"hljs-number\">0.002</span>\r\nparams[<span class=\"hljs-string\">'boosting_type'</span>] = <span class=\"hljs-string\">'gbdt'</span>\r\nparams[<span class=\"hljs-string\">'objective'</span>] = <span class=\"hljs-string\">'binary'</span>\r\nparams[<span class=\"hljs-string\">'metric'</span>] = <span class=\"hljs-string\">'binary_logloss'</span>\r\nparams[<span class=\"hljs-string\">'sub_feature'</span>] = <span class=\"hljs-number\">0.5</span>\r\nparams[<span class=\"hljs-string\">'num_leaves'</span>] = <span class=\"hljs-number\">10</span>\r\nparams[<span class=\"hljs-string\">'min_data'</span>] = <span class=\"hljs-number\">10</span>\r\nparams[<span class=\"hljs-string\">'max_depth'</span>] = <span class=\"hljs-number\">10</span>\r\n\r\nclf = lgb.train(params, d_train, <span class=\"hljs-number\">100</span>)\r\n\r\n<span class=\"hljs-comment\">#Prediction</span>\r\ny_pred=clf.predict(x_test)\r\n\r\npredictions = [round(value) <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> y_pred]\r\n\r\naccuracy = accuracy_score(y_test, predictions)\r\n\r\n\r\naccuracy", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T11:00:47.262Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 13, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 6, "fourth_level_category": 11, "description": "LGBM Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n\r\n\r\n<span class=\"hljs-comment\"># Importing the dataset</span>\r\ndataset = pd.read_csv(<span class=\"hljs-string\">'LGBM.csv'</span>)\r\n<span class=\"hljs-comment\"># split data into X and y</span>\r\nX = dataset.iloc[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = dataset.iloc[:,<span class=\"hljs-number\">5</span>]\r\n\r\n\r\n<span class=\"hljs-comment\"># Splitting the dataset into the Training set and Test set</span>\r\n\r\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = <span class=\"hljs-number\">0.2</span>, random_state = <span class=\"hljs-number\">0</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> lightgbm <span class=\"hljs-keyword\">as</span> lgb\r\nd_train = lgb.Dataset(x_train, label=y_train)\r\n\r\nparams = {}\r\nparams[<span class=\"hljs-string\">'learning_rate'</span>] = <span class=\"hljs-number\">0.002</span>\r\nparams[<span class=\"hljs-string\">'boosting_type'</span>] = <span class=\"hljs-string\">'gbdt'</span>\r\nparams[<span class=\"hljs-string\">'objective'</span>] = <span class=\"hljs-string\">'binary'</span>\r\nparams[<span class=\"hljs-string\">'metric'</span>] = <span class=\"hljs-string\">'binary_logloss'</span>\r\nparams[<span class=\"hljs-string\">'sub_feature'</span>] = <span class=\"hljs-number\">0.5</span>\r\nparams[<span class=\"hljs-string\">'num_leaves'</span>] = <span class=\"hljs-number\">10</span>\r\nparams[<span class=\"hljs-string\">'min_data'</span>] = <span class=\"hljs-number\">10</span>\r\nparams[<span class=\"hljs-string\">'max_depth'</span>] = <span class=\"hljs-number\">10</span>\r\n\r\nclf = lgb.train(params, d_train, <span class=\"hljs-number\">100</span>)\r\n\r\n<span class=\"hljs-comment\">#Prediction</span>\r\ny_pred=clf.predict(x_test)\r\n\r\npredictions = [round(value) <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> y_pred]\r\n\r\naccuracy = accuracy_score(y_test, predictions)\r\n\r\n\r\naccuracy", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T11:03:31.955Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 14, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 10, "fourth_level_category": null, "description": "KNN Skeleton Algorithm", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd \r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> KFold\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> cross_val_score\r\n<span class=\"hljs-keyword\">from</span> sklearn.neighbors <span class=\"hljs-keyword\">import</span> KNeighborsClassifier \r\n\r\ndata=pd.read_csv(<span class=\"hljs-string\">\"KNN.csv\"</span>)\r\n\r\narray=data.values\r\n\r\nX=array[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\n\r\nY=array[:,<span class=\"hljs-number\">5</span>]\r\n\r\nnum_folds=<span class=\"hljs-number\">10</span>\r\n\r\nkfold=KFold(n_splits=<span class=\"hljs-number\">5</span>)\r\n\r\nmodel=KNeighborsClassifier(n_neighbors=<span class=\"hljs-number\">10</span>)\r\n\r\n\r\nresult=cross_val_score(model,X,Y,cv=kfold)\r\n\r\n<span class=\"hljs-built_in\">print</span>(result.mean())\r\n\r\n<span class=\"hljs-comment\">#Grid Search CV </span>\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> sklearn.neighbors <span class=\"hljs-keyword\">import</span> KNeighborsClassifier\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GridSearchCV\r\n\r\narray=data.values\r\n\r\nX = array[:, <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nY = array[:, <span class=\"hljs-number\">5</span>]\r\n\r\nn_neighbors = numpy.array(range(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">30</span>))\r\nparam_grid = dict(n_neighbors=n_neighbors)\r\n\r\nmodel = KNeighborsClassifier()\r\ngrid = GridSearchCV(estimator=model, param_grid=param_grid)\r\ngrid.fit(X, Y)\r\n\r\n<span class=\"hljs-built_in\">print</span>(grid.best_score_)\r\n<span class=\"hljs-built_in\">print</span>(grid.best_params_)\r\n\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt \r\n%matplotlib inline\r\n<span class=\"hljs-comment\"># choose k between 1 to 31</span>\r\nk_range = range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">41</span>)\r\nk_scores = []\r\n\r\n<span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> k_range:\r\n    knn = KNeighborsClassifier(n_neighbors=k)\r\n    scores = cross_val_score(knn, X, Y, cv=<span class=\"hljs-number\">7</span>)\r\n    k_scores.append(scores.mean())\r\n<span class=\"hljs-comment\"># plot </span>\r\nplt.plot(k_range, k_scores)\r\nplt.xlabel(<span class=\"hljs-string\">'Value of K for KNN'</span>)\r\nplt.ylabel(<span class=\"hljs-string\">'Cross-Validated Accuracy'</span>)\r\nplt.show()", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T11:50:04.563Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 15, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 11, "fourth_level_category": null, "description": "SVM Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> sklearn.feature_extraction.text <span class=\"hljs-keyword\">import</span> CountVectorizer, TfidfVectorizer\r\n<span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> StandardScaler\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> svm\r\n<span class=\"hljs-keyword\">from</span> sklearn.svm <span class=\"hljs-keyword\">import</span> SVC\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GridSearchCV\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> classification_report\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> accuracy_score, confusion_matrix\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split, cross_val_score\r\n\r\n\r\ndata=pd.read_csv(<span class=\"hljs-string\">\"SVM.csv\"</span>)\r\n\r\n\r\narray=data.values\r\n\r\nX_train=array[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\n\r\nY_train=data.iloc[:,<span class=\"hljs-number\">6</span>]\r\nY_train\r\n\r\narray1=data_test.values\r\narray1\r\n\r\nX_test=array1[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\nX_test\r\n\r\nY_test=data_test.iloc[:,<span class=\"hljs-number\">6</span>]\r\nY_test\r\n\r\n<span class=\"hljs-comment\">#grid seacrch cv</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> svm\r\n<span class=\"hljs-keyword\">from</span> sklearn.svm <span class=\"hljs-keyword\">import</span> SVC\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GridSearchCV\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> classification_report\r\n\r\n\r\n\r\nclf=SVC()\r\nparam_grid = [{<span class=\"hljs-string\">'kernel'</span>:[<span class=\"hljs-string\">'rbf'</span>],<span class=\"hljs-string\">'gamma'</span>:[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">0.5</span>],<span class=\"hljs-string\">'C'</span>:[<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">0.1</span>,<span class=\"hljs-number\">0.001</span>] }]\r\ngsv = GridSearchCV(clf,param_grid,cv=<span class=\"hljs-number\">5</span>)\r\ngsv.fit(X_train,Y_train)\r\n\r\n\r\n\r\ngsv.best_params_,gsv.best_score_\r\n\r\nclf = SVC(C= <span class=\"hljs-number\">12</span>, gamma = <span class=\"hljs-number\">10</span>)\r\nclf.fit(X_train , Y_train)\r\nY_pred = clf.predict(X_test)\r\nacc = accuracy_score(Y_test, Y_pred) * <span class=\"hljs-number\">100</span>\r\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy =\"</span>, acc)\r\nconfusion_matrix(Y_test, Y_pred)", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-19T12:04:52.780Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 16, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 1, "third_level_category": 1, "fourth_level_category": 1, "description": "Hierachical Skeleton code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\">#  hierarchical clustering </span>\r\n<span class=\"hljs-keyword\">import</span> scipy.cluster.hierarchy <span class=\"hljs-keyword\">as</span> sch\r\n<span class=\"hljs-keyword\">from</span> sklearn.cluster <span class=\"hljs-keyword\">import</span> AgglomerativeClustering\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>)\r\n\r\n<span class=\"hljs-comment\"># Normalization function </span>\r\ndef norm_func(i):\r\n    x = (i-i.min())/(i.max()-i.min())\r\n    <span class=\"hljs-keyword\">return</span> (x)\r\n\r\n<span class=\"hljs-comment\"># Normalized data frame (considering the numerical part of data)</span>\r\ndata_norm = norm_func(data.iloc[:,<span class=\"hljs-number\">1</span>:])\r\n\r\n<span class=\"hljs-comment\"># create dendrogram</span>\r\ndendrogram = sch.dendrogram(sch.linkage(df_norm, method=<span class=\"hljs-string\">'single'</span>))\r\n\r\n<span class=\"hljs-comment\"># create clusters</span>\r\nhc = AgglomerativeClustering(n_clusters=<span class=\"hljs-number\">5</span>, affinity = <span class=\"hljs-string\">'euclidean'</span>, linkage = <span class=\"hljs-string\">'single'</span>)\r\n\r\n<span class=\"hljs-comment\"># save clusters for chart</span>\r\ny_hc = hc.fit_predict(data_norm)\r\nClusters=pd.DataFrame(y_hc,columns=[<span class=\"hljs-string\">'Clusters'</span>])\r\n\r\ndf_norm[<span class=\"hljs-string\">'h_clusterid'</span>] = h_clusters.labels_", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-19T12:27:58.532Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 17, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 1, "third_level_category": 1, "fourth_level_category": 2, "description": "K- Means Clustering Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">from</span> sklearn.cluster <span class=\"hljs-keyword\">import</span> KMeans\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>)\r\n\r\n<span class=\"hljs-comment\"># Normalization function </span>\r\n<span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> StandardScaler\r\nscaler = StandardScaler()\r\nscaled_data= scaler.fit_transform(data.iloc[:,<span class=\"hljs-number\">1</span>:])\r\n\r\n\r\n\r\nk-nn = []\r\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>):\r\n    kmeans = KMeans(n_clusters=i,random_state=<span class=\"hljs-number\">0</span>)\r\n    kmeans.fit(scaled_data_df)\r\n    wcss.append(kmeans.inertia_)\r\n    \r\nplt.plot(range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>), k-nn)\r\nplt.title(<span class=\"hljs-string\">'Elbow Method'</span>)\r\nplt.xlabel(<span class=\"hljs-string\">'Number of clusters'</span>)\r\nplt.ylabel(<span class=\"hljs-string\">'k-nn'</span>)\r\nplt.show()\r\n\r\n<span class=\"hljs-comment\">#Build Cluster algorithm</span>\r\n<span class=\"hljs-keyword\">from</span> sklearn.cluster <span class=\"hljs-keyword\">import</span> KMeans\r\nclusters_new = KMeans(<span class=\"hljs-number\">5</span>, random_state=<span class=\"hljs-number\">40</span>)\r\nclusters_new.fit(scaled_data)\r\n\r\nclusters_new.labels_\r\n\r\n<span class=\"hljs-comment\">#Assign clusters to the data set</span>\r\ndata[<span class=\"hljs-string\">'clusterid_new'</span>] = clusters_new.labels_", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-19T12:39:41.280Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 18, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 1, "fourth_level_category": 3, "description": "DBSCAN Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-comment\">#Import the libraries</span>\r\n<span class=\"hljs-keyword\">from</span> sklearn.cluster <span class=\"hljs-keyword\">import</span> DBSCAN\r\n<span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> StandardScaler\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\r\ndf = pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>);\r\n\r\narray=df.values\r\n\r\nstdcaler = StandardScaler().fit(array)\r\nX = stscaler.transform(array)\r\ndbscan = DBSCAN(eps=<span class=\"hljs-number\">0.8</span>, min_samples=<span class=\"hljs-number\">10</span>)\r\ndbscan.fit(X)", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-19T12:44:40.172Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 19, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 1, "third_level_category": 12, "fourth_level_category": null, "description": "TSNE Clustering Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> sklearn.manifold <span class=\"hljs-keyword\">import</span> TSNE\r\n<span class=\"hljs-keyword\">from</span> bioinfokit.visuz <span class=\"hljs-keyword\">import</span> cluster\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>)\r\n\r\narray = data.values\r\n\r\nX = array[:,<span class=\"hljs-number\">1</span>:]\r\nY = array[:,<span class=\"hljs-number\">0</span>]\r\n<span class=\"hljs-keyword\">from</span> bioinfokit.visuz <span class=\"hljs-keyword\">import</span> cluster\r\n\r\ndata_tsne = TSNE(n_components=<span class=\"hljs-number\">2</span>).fit_transform(X)\r\ncluster.tsneplot(score=data_tsne)\r\n\r\ncolor_class = data[<span class=\"hljs-string\">'column'</span>].to_numpy()\r\ncluster.tsneplot(score=data_tsne, colorlist=color_class, legendpos=<span class=\"hljs-string\">'upper right'</span>,legendanchor=(<span class=\"hljs-number\">1.12</span>, <span class=\"hljs-number\">1</span>))", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-19T13:01:16.903Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 20, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 1, "third_level_category": 4, "fourth_level_category": null, "description": "PCA Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd \r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> sklearn.decomposition <span class=\"hljs-keyword\">import</span> PCA\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> scale \r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>)\r\n\r\n\r\n<span class=\"hljs-comment\"># Normalizing the numerical data </span>\r\ndata_normal = scale(data)\r\n\r\ndata_normal\r\n\r\npca = PCA()\r\npca_values = pca.fit_transform(data_normal)\r\n\r\npca_values\r\n\r\npca = PCA(n_components = <span class=\"hljs-number\">5</span>)\r\npca_values = pca.fit_transform(data_normal)\r\n\r\n<span class=\"hljs-comment\"># The amount of variance that each PCA explains is </span>\r\nvar = pca.explained_variance_ratio_\r\nvar\r\n\r\n<span class=\"hljs-comment\"># Cumulative variance </span>\r\nvar1 = np.cumsum(np.round(var,decimals = <span class=\"hljs-number\">4</span>)*<span class=\"hljs-number\">100</span>)\r\nvar1\r\n\r\npca.components_\r\n\r\n<span class=\"hljs-comment\"># Variance plot for PCA components obtained </span>\r\nplt.plot(var1,color=<span class=\"hljs-string\">\"red\"</span>)\r\n\r\n pca_values[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">1</span>]\r\n\r\n<span class=\"hljs-comment\"># plot between PCA1 and PCA2 </span>\r\nx = pca_values[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">1</span>]\r\ny = pca_values[:,<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">2</span>]\r\n\r\nplt.scatter(x,y)\r\n\r\nfinal_data = pd.concat([pd.DataFrame(pca_values[:,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">2</span>],columns=[<span class=\"hljs-string\">'pc1'</span>,<span class=\"hljs-string\">'pc2'</span>]), data[[<span class=\"hljs-string\">'data'</span>]]], axis = <span class=\"hljs-number\">1</span>)", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-19T13:16:13.612Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 21, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 1, "third_level_category": 2, "fourth_level_category": null, "description": "Association Rule Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> mlxtend.frequent_patterns <span class=\"hljs-keyword\">import</span> apriori,association_rules\r\n<span class=\"hljs-keyword\">from</span> mlxtend.preprocessing <span class=\"hljs-keyword\">import</span> TransactionEncoder\r\n\r\n\r\ndata= pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>)\r\n\r\n\r\n<span class=\"hljs-comment\"># Apriori Algorithm </span>\r\n\r\nfrequent_itemsets = apriori(data, min_support=<span class=\"hljs-number\">0.1</span>, use_colnames=True)\r\nfrequent_itemsets\r\n\r\nrules = association_rules(frequent_itemsets, metric=<span class=\"hljs-string\">\"lift\"</span>, min_threshold=<span class=\"hljs-number\">0.5</span>)\r\nrules\r\n\r\n<span class=\"hljs-comment\">#####  A leverage value of 0 indicates independence. \r\n\r\nrules.sort_values('lift',ascending = False)[0:20]\r\n\r\nrules[rules.lift&gt;1]\r\n\r\n</span>", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-20T04:40:34.054Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 22, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 1, "third_level_category": 3, "fourth_level_category": null, "description": "Recommendation Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\ndata = pd.read_csv(<span class=\"hljs-string\">'data.csv'</span>)\r\n\r\n<span class=\"hljs-comment\">#number of unique users in the dataset</span>\r\nlen(data.Id.unique())\r\nlen(data.column.unique())\r\n\r\nuser_data= data.pivot(index=<span class=\"hljs-string\">'Id'</span>,\r\n                                 columns=<span class=\"hljs-string\">'column'</span>,\r\n                                 values=<span class=\"hljs-string\">'result'</span>).reset_index(drop=True)\r\n\r\n\r\nuser_data.index = data.Id.unique()\r\n\r\n\r\n<span class=\"hljs-comment\">#Calculating Cosine Similarity between Users</span>\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> pairwise_distances\r\n<span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> cosine, correlation\r\n\r\nuser_data = <span class=\"hljs-number\">1</span> - pairwise_distances( user_data.values,metric=<span class=\"hljs-string\">'cosine'</span>)\r\n\r\n\r\n\r\n<span class=\"hljs-comment\">#Store the results in a dataframe</span>\r\nuser_data = pd.DataFrame(user_data)\r\n\r\n<span class=\"hljs-comment\">#Set the index and column names to user ids </span>\r\nuser_data.index = data.Id.unique()\r\nuser_data.columns = data.Id.unique()\r\n\r\nuser_sim_df.iloc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\n\r\nnp.fill_diagonal(user_data, <span class=\"hljs-number\">0</span>)\r\nuser_data.iloc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\n\r\n<span class=\"hljs-comment\">#Most Similar Users</span>\r\nuser_data.idxmax(axis=<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">5</span>]\r\n\r\ndata[(data[<span class=\"hljs-string\">'Id'</span>]==<span class=\"hljs-number\">10</span>) | (data[<span class=\"hljs-string\">'ID'</span>]==<span class=\"hljs-number\">120</span>)]\r\n\r\nuser_1=data[data[<span class=\"hljs-string\">'Id'</span>]==<span class=\"hljs-number\">6</span>]\r\n\r\nuser_2=data[data[<span class=\"hljs-string\">'Id'</span>]==<span class=\"hljs-number\">10</span>]\r\n\r\n\r\npd.merge(user_1,user_2,<span class=\"hljs-literal\">on</span>=<span class=\"hljs-string\">'result'</span>,how=<span class=\"hljs-string\">'outer'</span>)", "language": "Python", "scope_of_work": "Scope 2", "code_file": "", "timestamp": "2022-02-20T05:03:16.022Z", "liked_by": []}}, {"model": "post.skeletonpost", "pk": 23, "fields": {"user": 4, "first_level_category": 1, "second_level_category": 2, "third_level_category": 5, "fourth_level_category": 4, "description": "Linear Regression Skeleton Code", "image1": "", "image2": "", "image3": "", "image4": "", "image5": "", "skeleton_code": "<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd \r\n\r\ndata=pd.read_csv(<span class=\"hljs-string\">\"data.csv\"</span>)\r\n\r\n\r\ndata.corr()\r\n\r\n<span class=\"hljs-keyword\">import</span> statsmodels.formula.api <span class=\"hljs-keyword\">as</span> smf\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \r\n\r\nmodel=smf.ols(<span class=\"hljs-string\">\"Y~X\"</span>,data=data).fit()\r\n\r\nsns.regplot(x=<span class=\"hljs-string\">'X'</span>,y=<span class=\"hljs-string\">'Y'</span>,data=data)\r\n\r\nmodel.params\r\n\r\n<span class=\"hljs-built_in\">print</span>(model.tvalues,<span class=\"hljs-string\">'\\n'</span>,model.pvalues)\r\n\r\n(model.rsquared,model.rsquared_adj)\r\n\r\n<span class=\"hljs-comment\">#tranformation technique </span>\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \r\n\r\nx=np.log(data.YearsExperience)\r\nmodel=smf.ols(<span class=\"hljs-string\">\"Y~np.log(data.X)\"</span>,data=data).fit()\r\n\r\npred1=model.predict(np.log(data.X))\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_squared_error\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt \r\n\r\nrmse=sqrt(mean_squared_error(data.X,pred1))\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \r\n\r\nx=np.sqrt(data.X)\r\nmodel=smf.ols(<span class=\"hljs-string\">\"Y~np.sqrt(data.X)\"</span>,data=data).fit()\r\n\r\npred2=model.predict(np.sqrt(data.X))\r\n\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_squared_error\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt \r\n\r\nrmse=sqrt(mean_squared_error,(data.X,pred2))\r\n\r\nx=np.exp(data.X)\r\nmodel=smf.ols(<span class=\"hljs-string\">\"Y~np.exp(X)\"</span>,data=data).fit()\r\n\r\npred3=model.predict(np.exp(data.X))\r\n\r\nrmse=sqrt(mean_squared_error(data.X,pred3))", "language": "Python", "scope_of_work": "Scope 1", "code_file": "", "timestamp": "2022-02-20T05:28:17.849Z", "liked_by": []}}, {"model": "post.flaginappropriate", "pk": 1, "fields": {"user": 1, "post": 19, "reason": "other", "timestamp": "2022-01-30T07:21:18.310Z"}}, {"model": "post.flaginappropriate", "pk": 2, "fields": {"user": 2, "post": 15, "reason": "tset", "timestamp": "2022-02-15T07:17:01.430Z"}}, {"model": "post.bookmark", "pk": 7, "fields": {"user": 6, "post": 18, "timestamp": "2022-02-03T07:25:58.294Z", "skeleton_post": null}}, {"model": "post.bookmark", "pk": 11, "fields": {"user": 3, "post": 19, "timestamp": "2022-02-09T09:23:05.954Z", "skeleton_post": null}}, {"model": "post.bookmark", "pk": 18, "fields": {"user": 6, "post": 19, "timestamp": "2022-02-15T02:43:47.275Z", "skeleton_post": null}}, {"model": "post.bookmark", "pk": 19, "fields": {"user": 6, "post": 16, "timestamp": "2022-02-15T02:44:09.222Z", "skeleton_post": null}}, {"model": "post.bookmark", "pk": 20, "fields": {"user": 2, "post": 18, "timestamp": "2022-02-15T07:15:54.501Z", "skeleton_post": null}}, {"model": "post.bookmark", "pk": 22, "fields": {"user": 6, "post": 30, "timestamp": "2022-07-03T05:23:13.022Z", "skeleton_post": null}}, {"model": "post.postcomment", "pk": 13, "fields": {"user": 3, "post": 16, "comment": "first comment", "timestamp": "2022-02-27T04:49:05.016Z"}}, {"model": "post.postcomment", "pk": 14, "fields": {"user": 3, "post": 16, "comment": "second cmt", "timestamp": "2022-02-27T05:06:19.320Z"}}, {"model": "post.postcomment", "pk": 15, "fields": {"user": 1, "post": 23, "comment": "Nice", "timestamp": "2022-02-27T15:05:01.503Z"}}, {"model": "post.postcomment", "pk": 16, "fields": {"user": 1, "post": 16, "comment": "test", "timestamp": "2022-02-27T15:06:19.450Z"}}, {"model": "post.postcomment", "pk": 17, "fields": {"user": 1, "post": 16, "comment": "test", "timestamp": "2022-02-27T15:06:24.059Z"}}, {"model": "post.postcomment", "pk": 18, "fields": {"user": 1, "post": 16, "comment": "new", "timestamp": "2022-02-27T15:06:42.798Z"}}, {"model": "post.postcomment", "pk": 19, "fields": {"user": 2, "post": 24, "comment": "test", "timestamp": "2022-02-28T05:26:04.842Z"}}, {"model": "post.postcomment", "pk": 20, "fields": {"user": 46, "post": 24, "comment": ".", "timestamp": "2022-04-20T06:37:51.245Z"}}, {"model": "post.postcomment", "pk": 21, "fields": {"user": 46, "post": 28, "comment": ".", "timestamp": "2022-04-20T06:41:34.761Z"}}]