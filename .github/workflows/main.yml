name: CollaborativePY Actions

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9.16]
        database-name:
          - collaborativepy
        database-password:
          - collaborativepy_pwd
        database-user:
          - collaborativepy_user
        database-host:
          - localhost
        database-port:
          - 5432
        database-engine:
          - django.db.backends.postgresql
        django-debug:
          - true

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ matrix.database-name }}
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
    - uses: actions/checkout@v3.3.0
    - name: Run the Container
      env:
        DATABASE_ENGINE: ${{ matrix.database-engine }}
        DATABASE_NAME: ${{ matrix.database-name }}
        DATABASE_USER: ${{ matrix.database-user }}
        DATABASE_PASSWORD: ${{ matrix.database-password }}
        DATABASE_HOST: ${{ matrix.database-host }}
        DATABASE_PORT: ${{ matrix.database-port }}
        DJANGO_DEBUG: ${{ matrix.django-debug }}
      run:
        docker-compose up
        docker-compose exec server python manage.py migrate
        docker-compose exec server python manage.py test
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v4.5.0
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt


#    - uses: actions/checkout@v3.3.0
#    - name: Build the images and start the containers
#      run: |
#        export GITHUB_WORKFLOW=True
#        export MODE="Test"
#        docker-compose -f docker-compose.yaml build
#        docker-compose -f docker-compose.yaml up -d
#        # run: docker-compose up -d --build
    - name: Stop containers
      if: always()
      run: docker-compose -f "docker-compose.yml" down
